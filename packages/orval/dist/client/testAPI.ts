/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Test API
 * Test API.
 * OpenAPI spec version: 1.0.0
 */
import {
  z as zod
} from 'zod';


export const testAuthBearerQueryParams = zod.object({
  "qo": zod.string().optional(),
  "qr": zod.string(),
  "cursor": zod.string().min(1).optional().describe('An opaque identifier that points to the next item in the collection.')
})

export const testAuthBearerResponseZipCodeRegExp = new RegExp('[0-9]+');


export const testAuthBearerResponse = zod.object({
  "name": zod.string().optional().describe('name of the person'),
  "address": zod.any().optional(),
  "birth": zod.string().datetime({}).optional(),
  "death": zod.string().date().optional(),
  "age": zod.union([zod.literal(20),zod.literal(40),zod.literal(50)]).optional(),
  "zipCode": zod.string().regex(testAuthBearerResponseZipCodeRegExp).optional()
})


export const testAuthBearerHttpQueryParams = zod.object({
  "qo": zod.string().optional(),
  "qr": zod.string(),
  "cursor": zod.string().min(1).optional().describe('An opaque identifier that points to the next item in the collection.')
})


export const testSimpleTokenQueryParams = zod.object({
  "qo": zod.string().optional(),
  "qr": zod.string(),
  "cursor": zod.string().min(1).optional().describe('An opaque identifier that points to the next item in the collection.')
})


export const testMultipleSuccessResponseContentSubjectMin = 10;

export const testMultipleSuccessResponseContentSubjectMax = 120;
export const testMultipleSuccessResponseContentMarkdownMin = 80;

export const testMultipleSuccessResponseContentMarkdownMax = 10000;


export const testMultipleSuccessResponse = zod.object({
  "id": zod.string(),
  "content": zod.object({
  "subject": zod.string().min(testMultipleSuccessResponseContentSubjectMin).max(testMultipleSuccessResponseContentSubjectMax).optional().describe('The (optional) subject of the message - note that only some notification\nchannels support the display of a subject. When a subject is not provided,\none gets generated from the client attributes.'),
  "markdown": zod.string().min(testMultipleSuccessResponseContentMarkdownMin).max(testMultipleSuccessResponseContentMarkdownMax).describe('The full version of the message, in plain text or Markdown format. The\ncontent of this field will be delivered to channels that don\'t have any\nlimit in terms of content size (e.g. email, etc...).')
}),
  "sender_service_id": zod.string().optional()
})


export const testFileUploadBody = zod.object({
  "file": zod.instanceof(File).optional()
})


export const testBinaryFileUploadBody = zod.object({
  "file": zod.instanceof(File).optional()
})


export const testParameterWithReferenceQueryRequestIdMin = 10;


export const testParameterWithReferenceQueryParams = zod.object({
  "request-id": zod.string().min(testParameterWithReferenceQueryRequestIdMin).optional()
})


export const testInlineBodySchemaBody = zod.object({
  "name": zod.string(),
  "age": zod.number().optional()
})


export const testParameterWithBodyReferenceBody = zod.object({
  "id": zod.string(),
  "name": zod.string()
})


export const putTestParameterWithBodyReferenceBody = zod.object({
  "id": zod.string(),
  "name": zod.string()
})


export const testParameterWithDashPathPathParamMin = 5;


export const testParameterWithDashParams = zod.object({
  "path-param": zod.string().min(testParameterWithDashPathPathParamMin)
})

export const testParameterWithDashQueryRequestIdMin = 10;


export const testParameterWithDashQueryParams = zod.object({
  "foo-bar": zod.string().optional(),
  "request-id": zod.string().min(testParameterWithDashQueryRequestIdMin).optional()
})

export const testParameterWithDashHeader = zod.object({
  "headerInlineParam": zod.string(),
  "x-header-param": zod.string().describe('A header param which has dashes in it')
})


export const testParameterWithDashAnUnderscoreParams = zod.object({
  "path-param": zod.string()
})

export const testParameterWithDashAnUnderscoreQueryRequestIdMin = 10;


export const testParameterWithDashAnUnderscoreQueryParams = zod.object({
  "foo_bar": zod.string().optional(),
  "request-id": zod.string().min(testParameterWithDashAnUnderscoreQueryRequestIdMin).optional()
})

export const testParameterWithDashAnUnderscoreHeader = zod.object({
  "headerInlineParam": zod.string(),
  "x-header-param": zod.string().describe('A header param which has dashes in it')
})


export const testWithTwoParamsParams = zod.object({
  "first-param": zod.string(),
  "second-param": zod.string()
})


export const testParamWithSchemaRefParams = zod.object({
  "param": zod.string()
})


export const testHeaderWithSchemaRefHeader = zod.object({
  "param": zod.string()
})


export const testHeaderOptionalHeader = zod.object({
  "param": zod.string().optional()
})


export const testMultiContentTypesBody = zod.object({
  "id": zod.string(),
  "name": zod.string()
})

export const testMultiContentTypesResponse = zod.object({
  "id": zod.string(),
  "name": zod.string()
})


export const testDeserializationResponse = zod.object({
  "name": zod.string(),
  "age": zod.number()
})


