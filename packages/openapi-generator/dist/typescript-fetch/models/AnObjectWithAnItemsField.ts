/* tslint:disable */
/* eslint-disable */
/**
 * Test API
 * Test API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DefinitionFieldWithDash } from './DefinitionFieldWithDash';
import {
    DefinitionFieldWithDashFromJSON,
    DefinitionFieldWithDashFromJSONTyped,
    DefinitionFieldWithDashToJSON,
} from './DefinitionFieldWithDash';

/**
 * What if a object has a field named items?
 * The case is an object like { items: [] }, which is legal
 * @export
 * @interface AnObjectWithAnItemsField
 */
export interface AnObjectWithAnItemsField {
    /**
     * 
     * @type {Array<DefinitionFieldWithDash>}
     * @memberof AnObjectWithAnItemsField
     */
    items: Array<DefinitionFieldWithDash>;
}

/**
 * Check if a given object implements the AnObjectWithAnItemsField interface.
 */
export function instanceOfAnObjectWithAnItemsField(value: object): value is AnObjectWithAnItemsField {
    if (!('items' in value) || value['items'] === undefined) return false;
    return true;
}

export function AnObjectWithAnItemsFieldFromJSON(json: any): AnObjectWithAnItemsField {
    return AnObjectWithAnItemsFieldFromJSONTyped(json, false);
}

export function AnObjectWithAnItemsFieldFromJSONTyped(json: any, ignoreDiscriminator: boolean): AnObjectWithAnItemsField {
    if (json == null) {
        return json;
    }
    return {
        
        'items': ((json['items'] as Array<any>).map(DefinitionFieldWithDashFromJSON)),
    };
}

export function AnObjectWithAnItemsFieldToJSON(value?: AnObjectWithAnItemsField | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'items': ((value['items'] as Array<any>).map(DefinitionFieldWithDashToJSON)),
    };
}

