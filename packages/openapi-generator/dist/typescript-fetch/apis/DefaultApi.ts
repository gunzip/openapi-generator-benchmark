/* tslint:disable */
/* eslint-disable */
/**
 * Test API
 * Test API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AnotherModel,
  Blob,
  NewModel,
} from '../models/index';
import {
    AnotherModelFromJSON,
    AnotherModelToJSON,
    BlobFromJSON,
    BlobToJSON,
    NewModelFromJSON,
    NewModelToJSON,
} from '../models/index';

export interface TestMultipleSuccessRequest {
    newModel: NewModel;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     */
    async testMultipleSuccessRaw(requestParameters: TestMultipleSuccessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NewModel>> {
        if (requestParameters['newModel'] == null) {
            throw new runtime.RequiredError(
                'newModel',
                'Required parameter "newModel" was null or undefined when calling testMultipleSuccess().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/test-multiple-success`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewModelToJSON(requestParameters['newModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NewModelFromJSON(jsonValue));
    }

    /**
     */
    async testMultipleSuccess(requestParameters: TestMultipleSuccessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NewModel | null | undefined > {
        const response = await this.testMultipleSuccessRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 201:
                return null;
            case 200:
                return await response.value();
            default:
                return await response.value();
        }
    }

}
