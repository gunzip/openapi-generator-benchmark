// This file is auto-generated by @hey-api/openapi-ts

export type Person = {
    /**
     * name of the person
     */
    name?: string;
    address?: {
        location?: string;
        city?: string;
        zipCode?: string;
    };
    birth?: string;
    death?: string;
    age?: 20 | 40 | 50;
    zipCode?: string;
};

export type age = 20 | 40 | 50;

export type Book = {
    /**
     * title of the book
     */
    title?: string;
    author?: {
        isDead?: boolean;
        info?: Person;
    };
};

/**
 * User's fiscal code.
 */
export type FiscalCode = string;

export type EmailAddress = string;

/**
 * True if the recipient of a message wants to store its content for later retrieval.
 */
export type IsInboxEnabled = boolean;

/**
 * True if the recipient of a message wants to forward the notifications to the default webhook.
 */
export type IsWebhookEnabled = boolean;

/**
 * Describes the user's profile.
 */
export type Profile = {
    email?: EmailAddress;
    family_name: string;
    fiscal_code: FiscalCode;
    has_profile: boolean;
    is_email_set: boolean;
    is_inbox_enabled?: IsInboxEnabled;
    is_webhook_enabled?: IsWebhookEnabled;
    name: string;
    preferred_email?: EmailAddress;
    preferred_languages?: PreferredLanguages;
    version: number;
    payload?: unknown;
};

export type SimpleDefinition = {
    id: string;
};

export type DefinitionFieldWithDash = {
    'id-field'?: string;
};

/**
 * The (optional) subject of the message - note that only some notification
 * channels support the display of a subject. When a subject is not provided,
 * one gets generated from the client attributes.
 */
export type MessageSubject = string;

/**
 * The full version of the message, in plain text or Markdown format. The
 * content of this field will be delivered to channels that don't have any
 * limit in terms of content size (e.g. email, etc...).
 */
export type MessageBodyMarkdown = string;

export type MessageContent = {
    subject?: MessageSubject;
    markdown: MessageBodyMarkdown;
};

export type Message = {
    id: string;
    content: MessageContent;
    sender_service_id?: string;
};

export type NewModel = {
    id: string;
    name: string;
};

/**
 * Pagination response parameters.
 */
export type PaginationResponse = {
    /**
     * Number of items returned for each page.
     */
    page_size?: number;
    /**
     * Contains an URL to GET the next #<page_size> results in the retrieved collection of items.
     */
    next?: string;
};

export type OneOfTest = {
    limited?: boolean;
} | {
    unlimited?: boolean;
};

/**
 * test if we can use allOf with just one element inside
 */
export type AllOfWithOneElementTest = {
    key?: string;
};

/**
 * test if we can use allOf with just ref one element inside
 */
export type AllOfWithOneRefElementTest = Profile;

/**
 * test if allOf with x-extensible-enum works fine
 */
export type AllOfWithXExtensibleEnum = Profile & {
    status: string;
};

export type AllOfTest = {
    items?: Array<Message>;
} & PaginationResponse;

export type PreferredLanguage = string;

/**
 * Indicates the User's preferred written or spoken languages in order of preference. Generally used for selecting a localized User interface. Valid values are concatenation of the ISO 639-1 two letter language code, an underscore, and the ISO 3166-1 2 letter country code; e.g., 'en_US' specifies the language English and country US.
 */
export type PreferredLanguages = Array<PreferredLanguage>;

/**
 * What if a object has a field named items?
 * The case is an object like { items: [] }, which is legal
 */
export type AnObjectWithAnItemsField = {
    items: Array<DefinitionFieldWithDash>;
};

/**
 * Describes an object with a ref import
 */
export type AnObjectWithRefImport = {
    prop1: SimpleDefinition;
};

export type WithinRangeStringTest = string;

export type NonNegativeNumberTest = number;

export type ConstantIntegerTest = 100;

export type NonNegativeIntegerTest = number;

export type WithinRangeIntegerTest = number;

export type WithinRangeNumberTest = number;

export type WithinRangeExclusiveMaximumIntegerTest = number;

export type WithinRangeExclusiveMinimumIntegerTest = number;

export type WithinRangeExclusiveMinimumNumberTest = number;

export type WithinRangeExclusiveMinMaxIntegerTest = number;

export type WithinRangeExclusiveMinMaxNumberTest = number;

export type WithinRangeExclusiveMaximumNumberTest = number;

export type CustomStringFormatTest = string;

export type EnumTest = {
    status?: 'value1' | 'value2' | 'value3';
};

export type status = 'value1' | 'value2' | 'value3';

export type AdditionalPropsTest = {
    [key: string]: Array<(number)>;
};

export type AdditionalPropsTrueTest = {
    [key: string]: unknown;
};

export type AdditionalpropsDefault = {
    [key: string]: Array<(number)>;
};

export type InlinePropertyTest = {
    /**
     * The device global unique identifier.
     */
    inlineProp?: string;
};

export type NestedObjectTest = {
    /**
     * The device global unique identifier.
     */
    inlineProp?: string;
    nestedObject?: {
        /**
         * The device global unique identifier.
         */
        inlineProp?: string;
    };
};

export type OrganizationFiscalCode = string;

export type OrganizationFiscalCodeTest = string;

/**
 * a definition which is a list of other definitions.
 */
export type ListOfDefinitions = Array<{
    field?: string;
}>;

/**
 * a definition which is a list of references to other definitions.
 */
export type ListOfReferences = Array<DefinitionFieldWithDash>;

export type EnabledUserTest = {
    description: string;
    enabled: boolean;
    username: string;
};

export type DisabledUserTest = {
    enabled: boolean;
    reason: string;
    username: string;
};

export type DisjointUnionsUserTest = EnabledUserTest | DisabledUserTest;

export type EnumTrueTest = {
    flag?: boolean;
};

export type EnumFalseTest = {
    flag?: boolean;
};

export type ObjectDefinitionWithImplicitType = {
    prop_one?: string;
    prop_two?: string;
};

export type ObjectDefinitionWithImplicitTypeAndAdditionalProperties = unknown;

/**
 * An opaque identifier that points to the next item in the collection.
 */
export type ParameterPaginationRequest = string;

export type ParameterRequestId = string;

export type ParameterRequiredRequestId = string;

/**
 * A header param which has dashes in it
 */
export type ParameterHeaderParamWithReference = string;

export type TestAuthBearerData = {
    /**
     * An opaque identifier that points to the next item in the collection.
     */
    cursor?: string;
    qo?: string;
    qr: string;
};

export type TestAuthBearerResponse = unknown;

export type TestAuthBearerHttpData = {
    /**
     * An opaque identifier that points to the next item in the collection.
     */
    cursor?: string;
    qo?: string;
    qr: string;
};

export type TestAuthBearerHttpResponse = unknown;

export type TestSimpleTokenData = {
    /**
     * An opaque identifier that points to the next item in the collection.
     */
    cursor?: string;
    qo?: string;
    qr: string;
};

export type TestSimpleTokenResponse = unknown;

export type TestMultipleSuccessResponse = Message | unknown;

export type TestFileUploadData = {
    formData: {
        file?: (Blob | File);
    };
};

export type TestFileUploadResponse = unknown;

export type TestBinaryFileUploadData = {
    formData: {
        file?: (Blob | File);
    };
};

export type TestBinaryFileUploadResponse = unknown;

export type TestBinaryFileDownloadResponse = (Blob | File);

export type TestResponseHeaderResponse = Message;

export type TestParameterWithReferenceData = {
    requestId?: string;
};

export type TestParameterWithReferenceResponse = unknown;

export type TestParameterWithBodyReferenceData = {
    requestBody?: NewModel;
};

export type TestParameterWithBodyReferenceResponse = unknown;

export type PutTestParameterWithBodyReferenceData = {
    requestBody?: NewModel;
};

export type PutTestParameterWithBodyReferenceResponse = unknown;

export type TestParameterWithDashData = {
    fooBar?: string;
    headerInlineParam: string;
    pathParam: string;
    requestId?: string;
    /**
     * A header param which has dashes in it
     */
    xHeaderParam: string;
};

export type TestParameterWithDashResponse = unknown;

export type TestParameterWithDashAnUnderscoreData = {
    fooBar?: string;
    headerInlineParam: string;
    pathParam: string;
    requestId?: string;
    /**
     * A header param which has dashes in it
     */
    xHeaderParam: string;
};

export type TestParameterWithDashAnUnderscoreResponse = unknown;

export type TestWithTwoParamsData = {
    firstParam: string;
    secondParam: string;
};

export type TestWithTwoParamsResponse = unknown;

export type TestParametersAtPathLevelData = {
    /**
     * An opaque identifier that points to the next item in the collection.
     */
    cursor?: string;
    requestId: string;
};

export type TestParametersAtPathLevelResponse = unknown;

export type TestSimplePatchResponse = unknown;

export type TestCustomTokenHeaderResponse = unknown;

export type TestWithEmptyResponseResponse = unknown;

export type TestParamWithSchemaRefData = {
    param: CustomStringFormatTest;
};

export type TestParamWithSchemaRefResponse = unknown;

export type TestHeaderWithSchemaRefData = {
    param: CustomStringFormatTest;
};

export type TestHeaderWithSchemaRefResponse = unknown;

export type TestHeaderOptionalData = {
    param?: CustomStringFormatTest;
};

export type TestHeaderOptionalResponse = unknown;

export type TestDatesResponse = Person;

export type $OpenApiTs = {
    '/test-auth-bearer': {
        get: {
            req: TestAuthBearerData;
            res: {
                /**
                 * Will send `Authenticated`
                 */
                200: unknown;
                /**
                 * You do not have necessary permissions for the resource
                 */
                403: unknown;
            };
        };
    };
    '/test-auth-bearer-http': {
        get: {
            req: TestAuthBearerHttpData;
            res: {
                /**
                 * Will send `Authenticated`
                 */
                200: unknown;
                /**
                 * You do not have necessary permissions for the resource
                 */
                403: unknown;
            };
        };
    };
    '/test-simple-token': {
        get: {
            req: TestSimpleTokenData;
            res: {
                /**
                 * Will send `Authenticated`
                 */
                200: unknown;
                /**
                 * You do not have necessary permissions for the resource
                 */
                403: unknown;
            };
        };
    };
    '/test-multiple-success': {
        get: {
            res: {
                /**
                 * Will return a Message
                 */
                200: Message;
                /**
                 * Will return just accepted
                 */
                202: unknown;
                /**
                 * You do not have necessary permissions for the resource
                 */
                403: OneOfTest;
                /**
                 * Not found
                 */
                404: unknown;
            };
        };
    };
    '/test-file-upload': {
        post: {
            req: TestFileUploadData;
            res: {
                /**
                 * File uploaded
                 */
                200: unknown;
            };
        };
    };
    '/test-binary-file-upload': {
        post: {
            req: TestBinaryFileUploadData;
            res: {
                /**
                 * File uploaded
                 */
                200: unknown;
            };
        };
    };
    '/test-binary-file-download': {
        get: {
            res: {
                /**
                 * Some success response
                 */
                200: (Blob | File);
            };
        };
    };
    '/test-response-header': {
        get: {
            res: {
                /**
                 * Will create a Message
                 */
                201: Message;
                /**
                 * Fatal error
                 */
                500: unknown;
            };
        };
    };
    '/test-parameter-with-reference': {
        post: {
            req: TestParameterWithReferenceData;
            res: {
                /**
                 * Created
                 */
                201: unknown;
                /**
                 * Fatal error
                 */
                500: unknown;
            };
        };
    };
    '/test-parameter-with-body-ref': {
        post: {
            req: TestParameterWithBodyReferenceData;
            res: {
                /**
                 * Created
                 */
                201: unknown;
                /**
                 * Fatal error
                 */
                500: unknown;
            };
        };
    };
    '/put-test-parameter-with-body-ref': {
        put: {
            req: PutTestParameterWithBodyReferenceData;
            res: {
                /**
                 * Created
                 */
                201: unknown;
                /**
                 * Fatal error
                 */
                500: unknown;
            };
        };
    };
    '/test-parameter-with-dash/{path-param}': {
        get: {
            req: TestParameterWithDashData;
            res: {
                /**
                 * Ok
                 */
                200: unknown;
                /**
                 * Fatal error
                 */
                500: unknown;
            };
        };
    };
    '/test-parameter-with-dash-and_underscore/{path-param}': {
        get: {
            req: TestParameterWithDashAnUnderscoreData;
            res: {
                /**
                 * Ok
                 */
                200: unknown;
                /**
                 * Fatal error
                 */
                500: unknown;
            };
        };
    };
    '/test-two-path-params/{first-param}/{second-param}': {
        get: {
            req: TestWithTwoParamsData;
            res: {
                /**
                 * Ok
                 */
                200: unknown;
                /**
                 * Fatal error
                 */
                500: unknown;
            };
        };
    };
    '/test-path-level-parameter': {
        get: {
            req: TestParametersAtPathLevelData;
            res: {
                /**
                 * Ok
                 */
                200: unknown;
                /**
                 * Fatal error
                 */
                500: unknown;
            };
        };
    };
    '/test-simple': {
        patch: {
            res: {
                /**
                 * Ok
                 */
                200: unknown;
                /**
                 * Fatal error
                 */
                500: unknown;
            };
        };
    };
    '/test-custom-token-header': {
        get: {
            res: {
                /**
                 * Will send `Authenticated`
                 */
                200: unknown;
                /**
                 * You do not have necessary permissions for the resource
                 */
                403: unknown;
            };
        };
    };
    '/test-with-empty-response': {
        get: {
            res: {
                /**
                 * Not found
                 */
                200: unknown;
            };
        };
    };
    '/test-param-with-schema-ref/{param}': {
        get: {
            req: TestParamWithSchemaRefData;
            res: {
                /**
                 * Ok
                 */
                200: unknown;
            };
        };
    };
    '/test-header-with-schema-ref': {
        get: {
            req: TestHeaderWithSchemaRefData;
            res: {
                /**
                 * Ok
                 */
                200: unknown;
            };
        };
    };
    '/test-header-optional': {
        get: {
            req: TestHeaderOptionalData;
            res: {
                /**
                 * Ok
                 */
                200: unknown;
            };
        };
    };
    '/test-dates': {
        get: {
            res: {
                /**
                 * Ok
                 */
                200: Person;
            };
        };
    };
};