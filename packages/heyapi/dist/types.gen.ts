// This file is auto-generated by @hey-api/openapi-ts

export type Person = {
    /**
     * name of the person
     */
    name?: string;
    address?: {
        location?: string;
        city?: string;
        zipCode?: string;
    };
    birth?: string;
    death?: string;
    age?: 20 | 40 | 50;
    zipCode?: string;
};

export type Book = {
    /**
     * title of the book
     */
    title?: string;
    author?: {
        isDead?: boolean;
        info?: Person;
    };
};

/**
 * User's fiscal code.
 */
export type FiscalCode = string;

export type EmailAddress = string;

/**
 * True if the recipient of a message wants to store its content for later retrieval.
 */
export type IsInboxEnabled = boolean;

/**
 * True if the recipient of a message wants to forward the notifications to the default webhook.
 */
export type IsWebhookEnabled = boolean;

/**
 * Profile
 * Describes the user's profile.
 */
export type Profile = {
    email?: EmailAddress;
    family_name: string;
    fiscal_code: FiscalCode;
    has_profile: boolean;
    is_email_set: boolean;
    is_inbox_enabled?: IsInboxEnabled;
    is_webhook_enabled?: IsWebhookEnabled;
    name: string;
    preferred_email?: EmailAddress;
    preferred_languages?: PreferredLanguages;
    version: number;
    payload?: {
        [key: string]: unknown;
    };
};

/**
 * SimpleDefinition
 */
export type SimpleDefinition = {
    id: string;
};

export type DefinitionFieldWithDash = {
    'id-field'?: string;
};

/**
 * The (optional) subject of the message - note that only some notification
 * channels support the display of a subject. When a subject is not provided,
 * one gets generated from the client attributes.
 */
export type MessageSubject = string;

/**
 * The full version of the message, in plain text or Markdown format. The
 * content of this field will be delivered to channels that don't have any
 * limit in terms of content size (e.g. email, etc...).
 */
export type MessageBodyMarkdown = string;

export type MessageContent = {
    subject?: MessageSubject;
    markdown: MessageBodyMarkdown;
};

/**
 * Message
 */
export type Message = {
    id: string;
    content: MessageContent;
    sender_service_id?: string;
};

/**
 * NewModel
 */
export type NewModel = {
    id: string;
    name: string;
};

/**
 * Pagination response parameters.
 */
export type PaginationResponse = {
    /**
     * Number of items returned for each page.
     */
    page_size?: number;
    /**
     * Contains an URL to GET the next #<page_size> results in the retrieved collection of items.
     */
    next?: string;
};

export type OneOfTest = {
    limited?: boolean;
} | {
    unlimited?: boolean;
};

/**
 * test if we can use allOf with just one element inside
 */
export type AllOfWithOneElementTest = {
    key?: string;
};

/**
 * test if we can use allOf with just ref one element inside
 */
export type AllOfWithOneRefElementTest = Profile;

/**
 * test if allOf with x-extensible-enum works fine
 */
export type AllOfWithXExtensibleEnum = Profile & {
    status: string;
};

export type AllOfTest = {
    items?: Array<Message>;
} & PaginationResponse;

export type PreferredLanguage = string;

/**
 * Indicates the User's preferred written or spoken languages in order of preference. Generally used for selecting a localized User interface. Valid values are concatenation of the ISO 639-1 two letter language code, an underscore, and the ISO 3166-1 2 letter country code; e.g., 'en_US' specifies the language English and country US.
 */
export type PreferredLanguages = Array<PreferredLanguage>;

/**
 * What if a object has a field named items?
 * The case is an object like { items: [] }, which is legal
 */
export type AnObjectWithAnItemsField = {
    items: Array<DefinitionFieldWithDash>;
};

/**
 * AnObjectWithRefImport
 * Describes an object with a ref import
 */
export type AnObjectWithRefImport = {
    prop1: SimpleDefinition;
};

export type TestDeserUser = {
    name: string;
    age: number;
};

/**
 * WithinRangeStringTest
 */
export type WithinRangeStringTest = string;

/**
 * NonNegativeNumberTest
 */
export type NonNegativeNumberTest = number;

/**
 * ConstantIntegerTest
 */
export type ConstantIntegerTest = 100;

/**
 * NonNegativeIntegerTest
 */
export type NonNegativeIntegerTest = number;

/**
 * WithinRangeIntegerTest
 */
export type WithinRangeIntegerTest = number;

/**
 * WithinRangeNumberTest
 */
export type WithinRangeNumberTest = number;

/**
 * WithinRangeExclusiveMaximumIntegerTest
 */
export type WithinRangeExclusiveMaximumIntegerTest = number;

/**
 * WithinRangeExclusiveMinimumIntegerTest
 */
export type WithinRangeExclusiveMinimumIntegerTest = number;

/**
 * WithinRangeExclusiveMinimumNumberTest
 */
export type WithinRangeExclusiveMinimumNumberTest = number;

/**
 * WithinRangeExclusiveMinMaxIntegerTest
 */
export type WithinRangeExclusiveMinMaxIntegerTest = number;

/**
 * WithinRangeExclusiveMinMaxNumberTest
 */
export type WithinRangeExclusiveMinMaxNumberTest = number;

/**
 * WithinRangeExclusiveMaximumNumberTest
 */
export type WithinRangeExclusiveMaximumNumberTest = number;

export type CustomStringFormatTest = string;

export type EnumTest = {
    status?: 'value1' | 'value2' | 'value3';
};

export type AdditionalPropsTest = {
    [key: string]: Array<number>;
};

export type AdditionalPropsTrueTest = {
    [key: string]: unknown;
};

export type AdditionalpropsDefault = {
    [key: string]: Array<number>;
};

export type InlinePropertyTest = {
    /**
     * The device global unique identifier.
     */
    inlineProp?: string;
};

export type NestedObjectTest = {
    /**
     * The device global unique identifier.
     */
    inlineProp?: string;
    nestedObject?: {
        /**
         * The device global unique identifier.
         */
        inlineProp?: string;
    };
};

export type OrganizationFiscalCode = string;

export type OrganizationFiscalCodeTest = string;

/**
 * a definition which is a list of other definitions.
 */
export type ListOfDefinitions = Array<{
    field?: string;
}>;

/**
 * a definition which is a list of references to other definitions.
 */
export type ListOfReferences = Array<DefinitionFieldWithDash>;

export type EnabledUserTest = {
    description: string;
    enabled: true;
    username: string;
};

export type DisabledUserTest = {
    enabled: false;
    reason: string;
    username: string;
};

export type DisjointUnionsUserTest = EnabledUserTest | DisabledUserTest;

export type EnumTrueTest = {
    flag?: true;
};

export type EnumFalseTest = {
    flag?: false;
};

export type ObjectDefinitionWithImplicitType = {
    prop_one?: string;
    prop_two?: string;
};

export type ObjectDefinitionWithImplicitTypeAndAdditionalProperties = unknown;

export type ProblemDetails = {
    /**
     * A URI reference that identifies the problem type.
     */
    type?: string;
    /**
     * A short, human-readable summary of the problem type.
     */
    title?: string;
    /**
     * The HTTP status code generated by the origin server.
     */
    status?: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem.
     */
    detail?: string;
    /**
     * A URI reference that identifies the specific occurrence of the problem.
     */
    instance?: string;
};

/**
 * An opaque identifier that points to the next item in the collection.
 */
export type PaginationRequest = string;

export type RequestId = string;

export type RequiredRequestId = string;

/**
 * A header param which has dashes in it
 */
export type HeaderParamWithReference = string;

export type TestAuthBearerData = {
    body?: never;
    path?: never;
    query: {
        qo?: string;
        qr: string;
        /**
         * An opaque identifier that points to the next item in the collection.
         */
        cursor?: string;
    };
    url: '/test-auth-bearer';
};

export type TestAuthBearerErrors = {
    /**
     * You do not have necessary permissions for the resource
     */
    403: unknown;
};

export type TestAuthBearerResponses = {
    /**
     * Will send `Authenticated`
     */
    200: Person;
};

export type TestAuthBearerResponse = TestAuthBearerResponses[keyof TestAuthBearerResponses];

export type TestAuthBearerHttpData = {
    body?: never;
    path?: never;
    query: {
        qo?: string;
        qr: string;
        /**
         * An opaque identifier that points to the next item in the collection.
         */
        cursor?: string;
    };
    url: '/test-auth-bearer-http';
};

export type TestAuthBearerHttpErrors = {
    /**
     * You do not have necessary permissions for the resource
     */
    403: unknown;
    /**
     * Another failure.
     */
    503: {
        prop1: SimpleDefinition;
        prop2?: string;
    };
    /**
     * Failure.
     */
    504: ProblemDetails;
};

export type TestAuthBearerHttpError = TestAuthBearerHttpErrors[keyof TestAuthBearerHttpErrors];

export type TestAuthBearerHttpResponses = {
    /**
     * Will send `Authenticated`
     */
    200: unknown;
};

export type TestSimpleTokenData = {
    body?: never;
    path?: never;
    query: {
        qo?: string;
        qr: string;
        /**
         * An opaque identifier that points to the next item in the collection.
         */
        cursor?: string;
    };
    url: '/test-simple-token';
};

export type TestSimpleTokenErrors = {
    /**
     * You do not have necessary permissions for the resource
     */
    403: unknown;
};

export type TestSimpleTokenResponses = {
    /**
     * Will send `Authenticated`
     */
    200: unknown;
};

export type TestMultipleSuccessData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/test-multiple-success';
};

export type TestMultipleSuccessErrors = {
    /**
     * You do not have necessary permissions for the resource
     */
    403: OneOfTest;
    /**
     * Not found
     */
    404: unknown;
};

export type TestMultipleSuccessError = TestMultipleSuccessErrors[keyof TestMultipleSuccessErrors];

export type TestMultipleSuccessResponses = {
    /**
     * Will return a Message
     */
    200: Message;
    /**
     * Will return just accepted
     */
    202: unknown;
};

export type TestMultipleSuccessResponse = TestMultipleSuccessResponses[keyof TestMultipleSuccessResponses];

export type TestFileUploadData = {
    body: {
        file?: Blob | File;
    };
    path?: never;
    query?: never;
    url: '/test-file-upload';
};

export type TestFileUploadResponses = {
    /**
     * File uploaded
     */
    200: unknown;
};

export type TestBinaryFileUploadData = {
    body: {
        file?: Blob | File;
    };
    path?: never;
    query?: never;
    url: '/test-binary-file-upload';
};

export type TestBinaryFileUploadResponses = {
    /**
     * File uploaded
     */
    200: unknown;
};

export type TestBinaryFileDownloadData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/test-binary-file-download';
};

export type TestBinaryFileDownloadResponses = {
    /**
     * Binary file download
     */
    200: Blob | File;
};

export type TestBinaryFileDownloadResponse = TestBinaryFileDownloadResponses[keyof TestBinaryFileDownloadResponses];

export type TestResponseHeaderData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/test-response-header';
};

export type TestResponseHeaderErrors = {
    /**
     * Fatal error
     */
    500: unknown;
};

export type TestResponseHeaderResponses = {
    /**
     * Will create a Message
     */
    201: Message;
};

export type TestResponseHeaderResponse = TestResponseHeaderResponses[keyof TestResponseHeaderResponses];

export type TestParameterWithReferenceData = {
    body?: never;
    path?: never;
    query?: {
        'request-id'?: string;
    };
    url: '/test-parameter-with-reference';
};

export type TestParameterWithReferenceErrors = {
    /**
     * Fatal error
     */
    500: unknown;
};

export type TestParameterWithReferenceResponses = {
    /**
     * Created
     */
    201: unknown;
};

export type TestInlineBodySchemaData = {
    body: {
        name: string;
        age?: number;
    };
    path?: never;
    query?: never;
    url: '/test-inline-body-schema';
};

export type TestInlineBodySchemaResponses = {
    /**
     * Created
     */
    201: unknown;
};

export type TestParameterWithBodyReferenceData = {
    body?: NewModel;
    path?: never;
    query?: never;
    url: '/test-parameter-with-body-ref';
};

export type TestParameterWithBodyReferenceErrors = {
    /**
     * Fatal error
     */
    500: unknown;
};

export type TestParameterWithBodyReferenceResponses = {
    /**
     * Created
     */
    201: unknown;
};

export type PutTestParameterWithBodyReferenceData = {
    body?: NewModel;
    path?: never;
    query?: never;
    url: '/put-test-parameter-with-body-ref';
};

export type PutTestParameterWithBodyReferenceErrors = {
    /**
     * Fatal error
     */
    500: unknown;
};

export type PutTestParameterWithBodyReferenceResponses = {
    /**
     * Created
     */
    201: unknown;
};

export type TestParameterWithDashData = {
    body?: never;
    headers: {
        headerInlineParam: string;
        /**
         * A header param which has dashes in it
         */
        'x-header-param': string;
    };
    path: {
        'path-param': string;
    };
    query?: {
        'foo-bar'?: string;
        'request-id'?: string;
    };
    url: '/test-parameter-with-dash/{path-param}';
};

export type TestParameterWithDashErrors = {
    /**
     * Fatal error
     */
    500: unknown;
};

export type TestParameterWithDashResponses = {
    /**
     * Ok
     */
    200: unknown;
};

export type TestParameterWithDashAnUnderscoreData = {
    body?: never;
    headers: {
        headerInlineParam: string;
        /**
         * A header param which has dashes in it
         */
        'x-header-param': string;
    };
    path: {
        'path-param': string;
    };
    query?: {
        foo_bar?: string;
        'request-id'?: string;
    };
    url: '/test-parameter-with-dash-and_underscore/{path-param}';
};

export type TestParameterWithDashAnUnderscoreErrors = {
    /**
     * Fatal error
     */
    500: unknown;
};

export type TestParameterWithDashAnUnderscoreResponses = {
    /**
     * Ok
     */
    200: unknown;
};

export type TestWithTwoParamsData = {
    body?: never;
    path: {
        'first-param': string;
        'second-param': string;
    };
    query?: never;
    url: '/test-two-path-params/{first-param}/{second-param}';
};

export type TestWithTwoParamsErrors = {
    /**
     * Fatal error
     */
    500: unknown;
};

export type TestWithTwoParamsResponses = {
    /**
     * Ok
     */
    200: unknown;
};

export type TestParametersAtPathLevelData = {
    body?: never;
    path?: never;
    query: {
        'request-id': string;
        /**
         * An opaque identifier that points to the next item in the collection.
         */
        cursor?: string;
    };
    url: '/test-path-level-parameter';
};

export type TestParametersAtPathLevelErrors = {
    /**
     * Fatal error
     */
    500: unknown;
};

export type TestParametersAtPathLevelResponses = {
    /**
     * Ok
     */
    200: unknown;
};

export type TestSimplePatchData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/test-simple';
};

export type TestSimplePatchErrors = {
    /**
     * Fatal error
     */
    500: unknown;
};

export type TestSimplePatchResponses = {
    /**
     * Ok
     */
    200: unknown;
};

export type TestCustomTokenHeaderData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/test-custom-token-header';
};

export type TestCustomTokenHeaderErrors = {
    /**
     * You do not have necessary permissions for the resource
     */
    403: unknown;
};

export type TestCustomTokenHeaderResponses = {
    /**
     * Will send `Authenticated`
     */
    200: unknown;
};

export type TestWithEmptyResponseData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/test-with-empty-response';
};

export type TestWithEmptyResponseResponses = {
    /**
     * Not found
     */
    200: unknown;
};

export type TestParamWithSchemaRefData = {
    body?: never;
    path: {
        param: CustomStringFormatTest;
    };
    query?: never;
    url: '/test-param-with-schema-ref/{param}';
};

export type TestParamWithSchemaRefResponses = {
    /**
     * Ok
     */
    200: unknown;
};

export type TestHeaderWithSchemaRefData = {
    body?: never;
    headers: {
        param: CustomStringFormatTest;
    };
    path?: never;
    query?: never;
    url: '/test-header-with-schema-ref';
};

export type TestHeaderWithSchemaRefResponses = {
    /**
     * Ok
     */
    200: unknown;
};

export type TestHeaderOptionalData = {
    body?: never;
    headers?: {
        param?: CustomStringFormatTest;
    };
    path?: never;
    query?: never;
    url: '/test-header-optional';
};

export type TestHeaderOptionalResponses = {
    /**
     * Ok
     */
    200: unknown;
};

export type TestOverriddenSecurityData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/test-with-overridden-security';
};

export type TestOverriddenSecurityResponses = {
    /**
     * Ok
     */
    200: unknown;
};

export type TestOverriddenSecurityNoAuthData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/test-with-overridden-security-no-auth';
};

export type TestOverriddenSecurityNoAuthResponses = {
    /**
     * Ok
     */
    200: unknown;
};

export type TestMultiContentTypesData = {
    body: NewModel;
    path?: never;
    query?: never;
    url: '/test-multi-content-types';
};

export type TestMultiContentTypesResponses = {
    /**
     * OK
     */
    200: NewModel;
    /**
     * OK
     */
    201: Book;
};

export type TestMultiContentTypesResponse = TestMultiContentTypesResponses[keyof TestMultiContentTypesResponses];

export type TestDeserializationData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/test-deserialization';
};

export type TestDeserializationResponses = {
    /**
     * Ok
     */
    200: TestDeserUser;
};

export type TestDeserializationResponse = TestDeserializationResponses[keyof TestDeserializationResponses];

export type ClientOptions = {
    baseUrl: 'https://localhost/api/v1' | 'https://localhost/api/v2' | (string & {});
};