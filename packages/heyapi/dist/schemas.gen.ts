// This file is auto-generated by @hey-api/openapi-ts

export const $Person = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description: 'name of the person'
        },
        address: {
            type: 'object',
            properties: {
                location: {
                    type: 'string'
                },
                city: {
                    type: 'string'
                },
                zipCode: {
                    type: 'string',
                    pattern: '^\\d{5}$'
                }
            }
        },
        birth: {
            type: 'string',
            format: 'date-time'
        },
        death: {
            type: 'string',
            format: 'date'
        },
        age: {
            type: 'integer',
            enum: [20, 40, 50]
        },
        zipCode: {
            type: 'string',
            pattern: '[0-9]+'
        }
    }
} as const;

export const $Book = {
    type: 'object',
    properties: {
        title: {
            type: 'string',
            description: 'title of the book'
        },
        author: {
            type: 'object',
            properties: {
                isDead: {
                    type: 'boolean'
                },
                info: {
                    '$ref': '#/components/schemas/Person'
                }
            }
        }
    }
} as const;

export const $FiscalCode = {
    type: 'string',
    description: "User's fiscal code.",
    pattern: '^[A-Z]{6}[0-9LMNPQRSTUV]{2}[ABCDEHLMPRST][0-9LMNPQRSTUV]{2}[A-Z][0-9LMNPQRSTUV]{3}[A-Z]$',
    example: 'SPNDNL80R13C555X'
} as const;

export const $EmailAddress = {
    type: 'string',
    format: 'email',
    example: 'foobar@example.com'
} as const;

export const $IsInboxEnabled = {
    type: 'boolean',
    default: false,
    description: 'True if the recipient of a message wants to store its content for later retrieval.'
} as const;

export const $IsWebhookEnabled = {
    type: 'boolean',
    default: false,
    description: 'True if the recipient of a message wants to forward the notifications to the default webhook.'
} as const;

export const $Profile = {
    title: 'Profile',
    description: "Describes the user's profile.",
    type: 'object',
    properties: {
        email: {
            '$ref': '#/components/schemas/EmailAddress'
        },
        family_name: {
            type: 'string'
        },
        fiscal_code: {
            '$ref': '#/components/schemas/FiscalCode'
        },
        has_profile: {
            type: 'boolean'
        },
        is_email_set: {
            type: 'boolean'
        },
        is_inbox_enabled: {
            '$ref': '#/components/schemas/IsInboxEnabled'
        },
        is_webhook_enabled: {
            '$ref': '#/components/schemas/IsWebhookEnabled'
        },
        name: {
            type: 'string'
        },
        preferred_email: {
            '$ref': '#/components/schemas/EmailAddress'
        },
        preferred_languages: {
            '$ref': '#/components/schemas/PreferredLanguages'
        },
        version: {
            type: 'integer'
        },
        payload: {
            type: 'object',
            properties: {}
        }
    },
    required: ['fiscal_code', 'family_name', 'has_profile', 'is_email_set', 'name', 'version']
} as const;

export const $SimpleDefinition = {
    title: 'SimpleDefinition',
    type: 'object',
    properties: {
        id: {
            type: 'string'
        }
    },
    required: ['id']
} as const;

export const $DefinitionFieldWithDash = {
    type: 'object',
    properties: {
        'id-field': {
            type: 'string'
        }
    }
} as const;

export const $MessageSubject = {
    type: 'string',
    description: `The (optional) subject of the message - note that only some notification
channels support the display of a subject. When a subject is not provided,
one gets generated from the client attributes.`,
    minLength: 10,
    maxLength: 120,
    example: 'Welcome new user !'
} as const;

export const $MessageBodyMarkdown = {
    type: 'string',
    description: `The full version of the message, in plain text or Markdown format. The
content of this field will be delivered to channels that don't have any
limit in terms of content size (e.g. email, etc...).`,
    minLength: 80,
    maxLength: 10000,
    example: `# This is a markdown header

to show how easily markdown can be converted to **HTML**

Remember: this has to be a long text.`
} as const;

export const $MessageContent = {
    type: 'object',
    properties: {
        subject: {
            '$ref': '#/components/schemas/MessageSubject'
        },
        markdown: {
            '$ref': '#/components/schemas/MessageBodyMarkdown'
        }
    },
    required: ['markdown']
} as const;

export const $Message = {
    title: 'Message',
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        content: {
            '$ref': '#/components/schemas/MessageContent'
        },
        sender_service_id: {
            type: 'string'
        }
    },
    required: ['id', 'content']
} as const;

export const $NewModel = {
    title: 'NewModel',
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        name: {
            type: 'string'
        }
    },
    required: ['id', 'name']
} as const;

export const $PaginationResponse = {
    type: 'object',
    description: 'Pagination response parameters.',
    properties: {
        page_size: {
            type: 'integer',
            minimum: 1,
            description: 'Number of items returned for each page.',
            example: 2
        },
        next: {
            type: 'string',
            description: 'Contains an URL to GET the next #<page_size> results in the retrieved collection of items.',
            format: 'uri',
            example: 'https://example.com/?p=0XXX2'
        }
    }
} as const;

export const $OneOfTest = {
    oneOf: [
        {
            type: 'object',
            properties: {
                limited: {
                    type: 'boolean'
                }
            }
        },
        {
            type: 'object',
            properties: {
                unlimited: {
                    type: 'boolean'
                }
            }
        }
    ]
} as const;

export const $AllOfWithOneElementTest = {
    description: 'test if we can use allOf with just one element inside',
    allOf: [
        {
            type: 'object',
            properties: {
                key: {
                    type: 'string'
                }
            }
        }
    ]
} as const;

export const $AllOfWithOneRefElementTest = {
    description: 'test if we can use allOf with just ref one element inside',
    allOf: [
        {
            '$ref': '#/components/schemas/Profile'
        }
    ]
} as const;

export const $AllOfWithXExtensibleEnum = {
    description: 'test if allOf with x-extensible-enum works fine',
    allOf: [
        {
            '$ref': '#/components/schemas/Profile'
        },
        {
            type: 'object',
            properties: {
                status: {
                    type: 'string',
                    'x-extensible-enum': ['ACTIVATED']
                }
            },
            required: ['status']
        }
    ]
} as const;

export const $AllOfTest = {
    allOf: [
        {
            type: 'object',
            properties: {
                items: {
                    type: 'array',
                    items: {
                        '$ref': '#/components/schemas/Message'
                    }
                }
            }
        },
        {
            '$ref': '#/components/schemas/PaginationResponse'
        }
    ]
} as const;

export const $PreferredLanguage = {
    type: 'string',
    'x-extensible-enum': ['it_IT', 'en_GB', 'es_ES', 'de_DE', 'fr_FR'],
    example: 'it_IT'
} as const;

export const $PreferredLanguages = {
    type: 'array',
    items: {
        '$ref': '#/components/schemas/PreferredLanguage'
    },
    description: "Indicates the User's preferred written or spoken languages in order of preference. Generally used for selecting a localized User interface. Valid values are concatenation of the ISO 639-1 two letter language code, an underscore, and the ISO 3166-1 2 letter country code; e.g., 'en_US' specifies the language English and country US."
} as const;

export const $AnObjectWithAnItemsField = {
    description: `What if a object has a field named items?
The case is an object like { items: [] }, which is legal`,
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DefinitionFieldWithDash'
            }
        }
    },
    required: ['items']
} as const;

export const $AnObjectWithRefImport = {
    title: 'AnObjectWithRefImport',
    description: 'Describes an object with a ref import',
    type: 'object',
    properties: {
        prop1: {
            '$ref': '#/components/schemas/SimpleDefinition'
        }
    },
    required: ['prop1']
} as const;

export const $WithinRangeStringTest = {
    title: 'WithinRangeStringTest',
    type: 'string',
    minLength: 8,
    maxLength: 10
} as const;

export const $NonNegativeNumberTest = {
    title: 'NonNegativeNumberTest',
    type: 'number',
    minimum: 0
} as const;

export const $ConstantIntegerTest = {
    title: 'ConstantIntegerTest',
    type: 'integer',
    enum: [100]
} as const;

export const $NonNegativeIntegerTest = {
    title: 'NonNegativeIntegerTest',
    type: 'integer',
    minimum: 0
} as const;

export const $WithinRangeIntegerTest = {
    title: 'WithinRangeIntegerTest',
    type: 'integer',
    minimum: 0,
    maximum: 10
} as const;

export const $WithinRangeNumberTest = {
    title: 'WithinRangeNumberTest',
    type: 'number',
    minimum: 0,
    maximum: 10
} as const;

export const $WithinRangeExclusiveMaximumIntegerTest = {
    title: 'WithinRangeExclusiveMaximumIntegerTest',
    type: 'integer',
    minimum: 0,
    maximum: 10,
    exclusiveMaximum: true
} as const;

export const $WithinRangeExclusiveMinimumIntegerTest = {
    title: 'WithinRangeExclusiveMinimumIntegerTest',
    type: 'integer',
    minimum: 0,
    exclusiveMinimum: true,
    maximum: 10
} as const;

export const $WithinRangeExclusiveMinimumNumberTest = {
    title: 'WithinRangeExclusiveMinimumNumberTest',
    type: 'number',
    minimum: 0,
    exclusiveMinimum: true,
    maximum: 10
} as const;

export const $WithinRangeExclusiveMinMaxIntegerTest = {
    title: 'WithinRangeExclusiveMinMaxIntegerTest',
    type: 'number',
    minimum: 0,
    exclusiveMinimum: true,
    maximum: 10,
    exclusiveMaximum: true
} as const;

export const $WithinRangeExclusiveMinMaxNumberTest = {
    title: 'WithinRangeExclusiveMinMaxNumberTest',
    type: 'number',
    minimum: 0,
    exclusiveMinimum: true,
    maximum: 10,
    exclusiveMaximum: true
} as const;

export const $WithinRangeExclusiveMaximumNumberTest = {
    title: 'WithinRangeExclusiveMaximumNumberTest',
    type: 'number',
    minimum: 0,
    maximum: 10,
    exclusiveMaximum: true
} as const;

export const $CustomStringFormatTest = {
    type: 'string',
    'x-import': '@pagopa/ts-commons/lib/strings',
    format: 'SomeCustomStringType'
} as const;

export const $EnumTest = {
    type: 'object',
    properties: {
        status: {
            type: 'string',
            enum: ['value1', 'value2', 'value3']
        }
    }
} as const;

export const $AdditionalPropsTest = {
    type: 'object',
    additionalProperties: {
        type: 'array',
        items: {
            type: 'number'
        }
    }
} as const;

export const $AdditionalPropsTrueTest = {
    type: 'object',
    additionalProperties: true
} as const;

export const $AdditionalpropsDefault = {
    type: 'object',
    default: {
        test: [1000]
    },
    additionalProperties: {
        type: 'array',
        items: {
            type: 'number'
        }
    }
} as const;

export const $InlinePropertyTest = {
    type: 'object',
    properties: {
        inlineProp: {
            type: 'string',
            description: 'The device global unique identifier.',
            pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
        }
    }
} as const;

export const $NestedObjectTest = {
    type: 'object',
    properties: {
        inlineProp: {
            type: 'string',
            description: 'The device global unique identifier.',
            pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
        },
        nestedObject: {
            type: 'object',
            properties: {
                inlineProp: {
                    type: 'string',
                    description: 'The device global unique identifier.',
                    pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
                }
            }
        }
    }
} as const;

export const $OrganizationFiscalCode = {
    type: 'string',
    'x-import': '@pagopa/ts-commons/lib/strings',
    format: 'OrganizationFiscalCode'
} as const;

export const $OrganizationFiscalCodeTest = {
    type: 'string',
    'x-import': '@pagopa/ts-commons/lib/strings',
    format: 'OrganizationFiscalCode'
} as const;

export const $ListOfDefinitions = {
    description: 'a definition which is a list of other definitions.',
    type: 'array',
    items: {
        type: 'object',
        properties: {
            field: {
                type: 'string'
            }
        }
    }
} as const;

export const $ListOfReferences = {
    description: 'a definition which is a list of references to other definitions.',
    type: 'array',
    items: {
        '$ref': '#/components/schemas/DefinitionFieldWithDash'
    }
} as const;

export const $EnabledUserTest = {
    type: 'object',
    properties: {
        description: {
            type: 'string'
        },
        enabled: {
            type: 'boolean',
            enum: [true]
        },
        username: {
            type: 'string'
        }
    },
    required: ['enabled', 'description', 'username']
} as const;

export const $DisabledUserTest = {
    type: 'object',
    properties: {
        enabled: {
            type: 'boolean',
            enum: [false]
        },
        reason: {
            type: 'string'
        },
        username: {
            type: 'string'
        }
    },
    required: ['enabled', 'reason', 'username']
} as const;

export const $DisjointUnionsUserTest = {
    oneOf: [
        {
            '$ref': '#/components/schemas/EnabledUserTest'
        },
        {
            '$ref': '#/components/schemas/DisabledUserTest'
        }
    ]
} as const;

export const $EnumTrueTest = {
    type: 'object',
    properties: {
        flag: {
            type: 'boolean',
            enum: [true]
        }
    }
} as const;

export const $EnumFalseTest = {
    type: 'object',
    properties: {
        flag: {
            type: 'boolean',
            enum: [false]
        }
    }
} as const;

export const $ObjectDefinitionWithImplicitType = {
    properties: {
        prop_one: {
            type: 'string'
        },
        prop_two: {
            type: 'string'
        }
    }
} as const;

export const $ObjectDefinitionWithImplicitTypeAndAdditionalProperties = {
    additionalProperties: {
        type: 'array',
        items: {
            type: 'number'
        }
    }
} as const;