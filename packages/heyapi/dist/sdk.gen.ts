// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from './client';
import type { TestAuthBearerData, TestAuthBearerResponses, TestAuthBearerErrors, TestAuthBearerHttpData, TestAuthBearerHttpResponses, TestAuthBearerHttpErrors, TestSimpleTokenData, TestSimpleTokenResponses, TestSimpleTokenErrors, TestMultipleSuccessData, TestMultipleSuccessResponses, TestMultipleSuccessErrors, TestFileUploadData, TestFileUploadResponses, TestBinaryFileUploadData, TestBinaryFileUploadResponses, TestBinaryFileDownloadData, TestBinaryFileDownloadResponses, TestResponseHeaderData, TestResponseHeaderResponses, TestResponseHeaderErrors, TestParameterWithReferenceData, TestParameterWithReferenceResponses, TestParameterWithReferenceErrors, TestInlineBodySchemaData, TestInlineBodySchemaResponses, TestParameterWithBodyReferenceData, TestParameterWithBodyReferenceResponses, TestParameterWithBodyReferenceErrors, PutTestParameterWithBodyReferenceData, PutTestParameterWithBodyReferenceResponses, PutTestParameterWithBodyReferenceErrors, TestParameterWithDashData, TestParameterWithDashResponses, TestParameterWithDashErrors, TestParameterWithDashAnUnderscoreData, TestParameterWithDashAnUnderscoreResponses, TestParameterWithDashAnUnderscoreErrors, TestWithTwoParamsData, TestWithTwoParamsResponses, TestWithTwoParamsErrors, TestParametersAtPathLevelData, TestParametersAtPathLevelResponses, TestParametersAtPathLevelErrors, TestSimplePatchData, TestSimplePatchResponses, TestSimplePatchErrors, TestCustomTokenHeaderData, TestCustomTokenHeaderResponses, TestCustomTokenHeaderErrors, TestWithEmptyResponseData, TestWithEmptyResponseResponses, TestParamWithSchemaRefData, TestParamWithSchemaRefResponses, TestHeaderWithSchemaRefData, TestHeaderWithSchemaRefResponses, TestHeaderOptionalData, TestHeaderOptionalResponses, TestOverriddenSecurityData, TestOverriddenSecurityResponses, TestOverriddenSecurityNoAuthData, TestOverriddenSecurityNoAuthResponses, TestMultiContentTypesData, TestMultiContentTypesResponses, TestDeserializationData, TestDeserializationResponses } from './types.gen';
import { zTestAuthBearerData, zTestAuthBearerResponse, zTestAuthBearerHttpData, zTestSimpleTokenData, zTestMultipleSuccessData, zTestMultipleSuccessResponse, zTestFileUploadData, zTestBinaryFileUploadData, zTestBinaryFileDownloadData, zTestBinaryFileDownloadResponse, zTestResponseHeaderData, zTestResponseHeaderResponse, zTestParameterWithReferenceData, zTestInlineBodySchemaData, zTestParameterWithBodyReferenceData, zPutTestParameterWithBodyReferenceData, zTestParameterWithDashData, zTestParameterWithDashAnUnderscoreData, zTestWithTwoParamsData, zTestParametersAtPathLevelData, zTestSimplePatchData, zTestCustomTokenHeaderData, zTestWithEmptyResponseData, zTestParamWithSchemaRefData, zTestHeaderWithSchemaRefData, zTestHeaderOptionalData, zTestOverriddenSecurityData, zTestOverriddenSecurityNoAuthData, zTestMultiContentTypesData, zTestMultiContentTypesResponse, zTestDeserializationData, zTestDeserializationResponse } from './zod.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const testAuthBearer = <ThrowOnError extends boolean = false>(options: Options<TestAuthBearerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TestAuthBearerResponses, TestAuthBearerErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zTestAuthBearerData.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zTestAuthBearerResponse.parseAsync(data);
        },
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/test-auth-bearer',
        ...options
    });
};

export const testAuthBearerHttp = <ThrowOnError extends boolean = false>(options: Options<TestAuthBearerHttpData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TestAuthBearerHttpResponses, TestAuthBearerHttpErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zTestAuthBearerHttpData.parseAsync(data);
        },
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test-auth-bearer-http',
        ...options
    });
};

export const testSimpleToken = <ThrowOnError extends boolean = false>(options: Options<TestSimpleTokenData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TestSimpleTokenResponses, TestSimpleTokenErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zTestSimpleTokenData.parseAsync(data);
        },
        security: [
            {
                name: 'X-Functions-Key',
                type: 'apiKey'
            }
        ],
        url: '/test-simple-token',
        ...options
    });
};

export const testMultipleSuccess = <ThrowOnError extends boolean = false>(options?: Options<TestMultipleSuccessData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TestMultipleSuccessResponses, TestMultipleSuccessErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zTestMultipleSuccessData.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zTestMultipleSuccessResponse.parseAsync(data);
        },
        security: [
            {
                name: 'custom-token',
                type: 'apiKey'
            }
        ],
        url: '/test-multiple-success',
        ...options
    });
};

export const testFileUpload = <ThrowOnError extends boolean = false>(options: Options<TestFileUploadData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TestFileUploadResponses, unknown, ThrowOnError>({
        ...formDataBodySerializer,
        requestValidator: async (data) => {
            return await zTestFileUploadData.parseAsync(data);
        },
        security: [
            {
                name: 'custom-token',
                type: 'apiKey'
            }
        ],
        url: '/test-file-upload',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

export const testBinaryFileUpload = <ThrowOnError extends boolean = false>(options: Options<TestBinaryFileUploadData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TestBinaryFileUploadResponses, unknown, ThrowOnError>({
        ...formDataBodySerializer,
        requestValidator: async (data) => {
            return await zTestBinaryFileUploadData.parseAsync(data);
        },
        security: [
            {
                name: 'custom-token',
                type: 'apiKey'
            }
        ],
        url: '/test-binary-file-upload',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

export const testBinaryFileDownload = <ThrowOnError extends boolean = false>(options?: Options<TestBinaryFileDownloadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TestBinaryFileDownloadResponses, unknown, ThrowOnError>({
        requestValidator: async (data) => {
            return await zTestBinaryFileDownloadData.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zTestBinaryFileDownloadResponse.parseAsync(data);
        },
        security: [
            {
                name: 'custom-token',
                type: 'apiKey'
            }
        ],
        url: '/test-binary-file-download',
        ...options
    });
};

export const testResponseHeader = <ThrowOnError extends boolean = false>(options?: Options<TestResponseHeaderData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TestResponseHeaderResponses, TestResponseHeaderErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zTestResponseHeaderData.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zTestResponseHeaderResponse.parseAsync(data);
        },
        security: [
            {
                name: 'custom-token',
                type: 'apiKey'
            }
        ],
        url: '/test-response-header',
        ...options
    });
};

export const testParameterWithReference = <ThrowOnError extends boolean = false>(options?: Options<TestParameterWithReferenceData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<TestParameterWithReferenceResponses, TestParameterWithReferenceErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zTestParameterWithReferenceData.parseAsync(data);
        },
        security: [
            {
                name: 'custom-token',
                type: 'apiKey'
            }
        ],
        url: '/test-parameter-with-reference',
        ...options
    });
};

export const testInlineBodySchema = <ThrowOnError extends boolean = false>(options: Options<TestInlineBodySchemaData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TestInlineBodySchemaResponses, unknown, ThrowOnError>({
        requestValidator: async (data) => {
            return await zTestInlineBodySchemaData.parseAsync(data);
        },
        security: [
            {
                name: 'custom-token',
                type: 'apiKey'
            }
        ],
        url: '/test-inline-body-schema',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const testParameterWithBodyReference = <ThrowOnError extends boolean = false>(options?: Options<TestParameterWithBodyReferenceData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<TestParameterWithBodyReferenceResponses, TestParameterWithBodyReferenceErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zTestParameterWithBodyReferenceData.parseAsync(data);
        },
        security: [
            {
                name: 'custom-token',
                type: 'apiKey'
            }
        ],
        url: '/test-parameter-with-body-ref',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const putTestParameterWithBodyReference = <ThrowOnError extends boolean = false>(options?: Options<PutTestParameterWithBodyReferenceData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<PutTestParameterWithBodyReferenceResponses, PutTestParameterWithBodyReferenceErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zPutTestParameterWithBodyReferenceData.parseAsync(data);
        },
        security: [
            {
                name: 'custom-token',
                type: 'apiKey'
            }
        ],
        url: '/put-test-parameter-with-body-ref',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const testParameterWithDash = <ThrowOnError extends boolean = false>(options: Options<TestParameterWithDashData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TestParameterWithDashResponses, TestParameterWithDashErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zTestParameterWithDashData.parseAsync(data);
        },
        security: [
            {
                name: 'custom-token',
                type: 'apiKey'
            }
        ],
        url: '/test-parameter-with-dash/{path-param}',
        ...options
    });
};

export const testParameterWithDashAnUnderscore = <ThrowOnError extends boolean = false>(options: Options<TestParameterWithDashAnUnderscoreData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TestParameterWithDashAnUnderscoreResponses, TestParameterWithDashAnUnderscoreErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zTestParameterWithDashAnUnderscoreData.parseAsync(data);
        },
        security: [
            {
                name: 'custom-token',
                type: 'apiKey'
            }
        ],
        url: '/test-parameter-with-dash-and_underscore/{path-param}',
        ...options
    });
};

export const testWithTwoParams = <ThrowOnError extends boolean = false>(options: Options<TestWithTwoParamsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TestWithTwoParamsResponses, TestWithTwoParamsErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zTestWithTwoParamsData.parseAsync(data);
        },
        security: [
            {
                name: 'custom-token',
                type: 'apiKey'
            }
        ],
        url: '/test-two-path-params/{first-param}/{second-param}',
        ...options
    });
};

/**
 * when we declare parameters at path level
 */
export const testParametersAtPathLevel = <ThrowOnError extends boolean = false>(options: Options<TestParametersAtPathLevelData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TestParametersAtPathLevelResponses, TestParametersAtPathLevelErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zTestParametersAtPathLevelData.parseAsync(data);
        },
        security: [
            {
                name: 'custom-token',
                type: 'apiKey'
            }
        ],
        url: '/test-path-level-parameter',
        ...options
    });
};

/**
 * simply test of patch endpoint are considered
 */
export const testSimplePatch = <ThrowOnError extends boolean = false>(options?: Options<TestSimplePatchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).patch<TestSimplePatchResponses, TestSimplePatchErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zTestSimplePatchData.parseAsync(data);
        },
        security: [
            {
                name: 'custom-token',
                type: 'apiKey'
            }
        ],
        url: '/test-simple',
        ...options
    });
};

export const testCustomTokenHeader = <ThrowOnError extends boolean = false>(options?: Options<TestCustomTokenHeaderData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TestCustomTokenHeaderResponses, TestCustomTokenHeaderErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zTestCustomTokenHeaderData.parseAsync(data);
        },
        security: [
            {
                name: 'custom-token',
                type: 'apiKey'
            }
        ],
        url: '/test-custom-token-header',
        ...options
    });
};

export const testWithEmptyResponse = <ThrowOnError extends boolean = false>(options?: Options<TestWithEmptyResponseData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TestWithEmptyResponseResponses, unknown, ThrowOnError>({
        requestValidator: async (data) => {
            return await zTestWithEmptyResponseData.parseAsync(data);
        },
        security: [
            {
                name: 'custom-token',
                type: 'apiKey'
            }
        ],
        url: '/test-with-empty-response',
        ...options
    });
};

export const testParamWithSchemaRef = <ThrowOnError extends boolean = false>(options: Options<TestParamWithSchemaRefData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TestParamWithSchemaRefResponses, unknown, ThrowOnError>({
        requestValidator: async (data) => {
            return await zTestParamWithSchemaRefData.parseAsync(data);
        },
        security: [
            {
                name: 'custom-token',
                type: 'apiKey'
            }
        ],
        url: '/test-param-with-schema-ref/{param}',
        ...options
    });
};

export const testHeaderWithSchemaRef = <ThrowOnError extends boolean = false>(options: Options<TestHeaderWithSchemaRefData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TestHeaderWithSchemaRefResponses, unknown, ThrowOnError>({
        requestValidator: async (data) => {
            return await zTestHeaderWithSchemaRefData.parseAsync(data);
        },
        security: [
            {
                name: 'custom-token',
                type: 'apiKey'
            }
        ],
        url: '/test-header-with-schema-ref',
        ...options
    });
};

export const testHeaderOptional = <ThrowOnError extends boolean = false>(options?: Options<TestHeaderOptionalData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TestHeaderOptionalResponses, unknown, ThrowOnError>({
        requestValidator: async (data) => {
            return await zTestHeaderOptionalData.parseAsync(data);
        },
        security: [
            {
                name: 'custom-token',
                type: 'apiKey'
            }
        ],
        url: '/test-header-optional',
        ...options
    });
};

export const testOverriddenSecurity = <ThrowOnError extends boolean = false>(options?: Options<TestOverriddenSecurityData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TestOverriddenSecurityResponses, unknown, ThrowOnError>({
        requestValidator: async (data) => {
            return await zTestOverriddenSecurityData.parseAsync(data);
        },
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/test-with-overridden-security',
        ...options
    });
};

export const testOverriddenSecurityNoAuth = <ThrowOnError extends boolean = false>(options?: Options<TestOverriddenSecurityNoAuthData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TestOverriddenSecurityNoAuthResponses, unknown, ThrowOnError>({
        requestValidator: async (data) => {
            return await zTestOverriddenSecurityNoAuthData.parseAsync(data);
        },
        url: '/test-with-overridden-security-no-auth',
        ...options
    });
};

export const testMultiContentTypes = <ThrowOnError extends boolean = false>(options: Options<TestMultiContentTypesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TestMultiContentTypesResponses, unknown, ThrowOnError>({
        requestValidator: async (data) => {
            return await zTestMultiContentTypesData.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zTestMultiContentTypesResponse.parseAsync(data);
        },
        url: '/test-multi-content-types',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const testDeserialization = <ThrowOnError extends boolean = false>(options?: Options<TestDeserializationData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TestDeserializationResponses, unknown, ThrowOnError>({
        requestValidator: async (data) => {
            return await zTestDeserializationData.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zTestDeserializationResponse.parseAsync(data);
        },
        url: '/test-deserialization',
        ...options
    });
};