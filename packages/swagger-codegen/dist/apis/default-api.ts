/* tslint:disable */
/* eslint-disable */
/**
 * Test API
 * Test API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CustomStringFormatTest } from '../models';
import { Message } from '../models';
import { NewModel } from '../models';
import { OneOfTest } from '../models';
import { Person } from '../models';
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {NewModel} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTestParameterWithBodyReference: async (body?: NewModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/put-test-parameter-with-body-ref`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {any} qr 
         * @param {any} [qo] 
         * @param {any} [cursor] An opaque identifier that points to the next item in the collection.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testAuthBearer: async (qr: any, qo?: any, cursor?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'qr' is not null or undefined
            if (qr === null || qr === undefined) {
                throw new RequiredError('qr','Required parameter qr was null or undefined when calling testAuthBearer.');
            }
            const localVarPath = `/test-auth-bearer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (qo !== undefined) {
                localVarQueryParameter['qo'] = qo;
            }

            if (qr !== undefined) {
                localVarQueryParameter['qr'] = qr;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {any} qr 
         * @param {any} [qo] 
         * @param {any} [cursor] An opaque identifier that points to the next item in the collection.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testAuthBearerHttp: async (qr: any, qo?: any, cursor?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'qr' is not null or undefined
            if (qr === null || qr === undefined) {
                throw new RequiredError('qr','Required parameter qr was null or undefined when calling testAuthBearerHttp.');
            }
            const localVarPath = `/test-auth-bearer-http`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerTokenHttp required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (qo !== undefined) {
                localVarQueryParameter['qo'] = qo;
            }

            if (qr !== undefined) {
                localVarQueryParameter['qr'] = qr;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testBinaryFileDownload: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/test-binary-file-download`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testBinaryFileUploadForm: async (file: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            if (file === null || file === undefined) {
                throw new RequiredError('file','Required parameter file was null or undefined when calling testBinaryFileUploadForm.');
            }
            const localVarPath = `/test-binary-file-upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testCustomTokenHeader: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/test-custom-token-header`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication customToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("custom-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["custom-token"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testDates: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/test-dates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testFileUploadForm: async (file: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            if (file === null || file === undefined) {
                throw new RequiredError('file','Required parameter file was null or undefined when calling testFileUploadForm.');
            }
            const localVarPath = `/test-file-upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomStringFormatTest} [param] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testHeaderOptional: async (param?: CustomStringFormatTest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/test-header-optional`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (param !== undefined && param !== null) {
                localVarHeaderParameter['param'] = String(JSON.stringify(param));
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomStringFormatTest} param 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testHeaderWithSchemaRef: async (param: CustomStringFormatTest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'param' is not null or undefined
            if (param === null || param === undefined) {
                throw new RequiredError('param','Required parameter param was null or undefined when calling testHeaderWithSchemaRef.');
            }
            const localVarPath = `/test-header-with-schema-ref`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (param !== undefined && param !== null) {
                localVarHeaderParameter['param'] = String(JSON.stringify(param));
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testMultipleSuccess: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/test-multiple-success`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomStringFormatTest} param 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testParamWithSchemaRef: async (param: CustomStringFormatTest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'param' is not null or undefined
            if (param === null || param === undefined) {
                throw new RequiredError('param','Required parameter param was null or undefined when calling testParamWithSchemaRef.');
            }
            const localVarPath = `/test-param-with-schema-ref/{param}`
                .replace(`{${"param"}}`, encodeURIComponent(String(param)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewModel} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testParameterWithBodyReference: async (body?: NewModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/test-parameter-with-body-ref`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {any} pathParam 
         * @param {any} headerInlineParam 
         * @param {any} xHeaderParam A header param which has dashes in it
         * @param {any} [fooBar] 
         * @param {any} [requestId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testParameterWithDash: async (pathParam: any, headerInlineParam: any, xHeaderParam: any, fooBar?: any, requestId?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pathParam' is not null or undefined
            if (pathParam === null || pathParam === undefined) {
                throw new RequiredError('pathParam','Required parameter pathParam was null or undefined when calling testParameterWithDash.');
            }
            // verify required parameter 'headerInlineParam' is not null or undefined
            if (headerInlineParam === null || headerInlineParam === undefined) {
                throw new RequiredError('headerInlineParam','Required parameter headerInlineParam was null or undefined when calling testParameterWithDash.');
            }
            // verify required parameter 'xHeaderParam' is not null or undefined
            if (xHeaderParam === null || xHeaderParam === undefined) {
                throw new RequiredError('xHeaderParam','Required parameter xHeaderParam was null or undefined when calling testParameterWithDash.');
            }
            const localVarPath = `/test-parameter-with-dash/{path-param}`
                .replace(`{${"path-param"}}`, encodeURIComponent(String(pathParam)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fooBar !== undefined) {
                localVarQueryParameter['foo-bar'] = fooBar;
            }

            if (requestId !== undefined) {
                localVarQueryParameter['request-id'] = requestId;
            }

            if (headerInlineParam !== undefined && headerInlineParam !== null) {
                localVarHeaderParameter['headerInlineParam'] = String(JSON.stringify(headerInlineParam));
            }

            if (xHeaderParam !== undefined && xHeaderParam !== null) {
                localVarHeaderParameter['x-header-param'] = String(JSON.stringify(xHeaderParam));
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {any} pathParam 
         * @param {any} headerInlineParam 
         * @param {any} xHeaderParam A header param which has dashes in it
         * @param {any} [fooBar] 
         * @param {any} [requestId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testParameterWithDashAnUnderscore: async (pathParam: any, headerInlineParam: any, xHeaderParam: any, fooBar?: any, requestId?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pathParam' is not null or undefined
            if (pathParam === null || pathParam === undefined) {
                throw new RequiredError('pathParam','Required parameter pathParam was null or undefined when calling testParameterWithDashAnUnderscore.');
            }
            // verify required parameter 'headerInlineParam' is not null or undefined
            if (headerInlineParam === null || headerInlineParam === undefined) {
                throw new RequiredError('headerInlineParam','Required parameter headerInlineParam was null or undefined when calling testParameterWithDashAnUnderscore.');
            }
            // verify required parameter 'xHeaderParam' is not null or undefined
            if (xHeaderParam === null || xHeaderParam === undefined) {
                throw new RequiredError('xHeaderParam','Required parameter xHeaderParam was null or undefined when calling testParameterWithDashAnUnderscore.');
            }
            const localVarPath = `/test-parameter-with-dash-and_underscore/{path-param}`
                .replace(`{${"path-param"}}`, encodeURIComponent(String(pathParam)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fooBar !== undefined) {
                localVarQueryParameter['foo_bar'] = fooBar;
            }

            if (requestId !== undefined) {
                localVarQueryParameter['request-id'] = requestId;
            }

            if (headerInlineParam !== undefined && headerInlineParam !== null) {
                localVarHeaderParameter['headerInlineParam'] = String(JSON.stringify(headerInlineParam));
            }

            if (xHeaderParam !== undefined && xHeaderParam !== null) {
                localVarHeaderParameter['x-header-param'] = String(JSON.stringify(xHeaderParam));
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {any} [requestId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testParameterWithReference: async (requestId?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/test-parameter-with-reference`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (requestId !== undefined) {
                localVarQueryParameter['request-id'] = requestId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * when we declare parameters at path level
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testParametersAtPathLevel: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/test-path-level-parameter`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testResponseHeader: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/test-response-header`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * simply test of patch endpoint are considered
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testSimplePatch: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/test-simple`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {any} qr 
         * @param {any} [qo] 
         * @param {any} [cursor] An opaque identifier that points to the next item in the collection.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testSimpleToken: async (qr: any, qo?: any, cursor?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'qr' is not null or undefined
            if (qr === null || qr === undefined) {
                throw new RequiredError('qr','Required parameter qr was null or undefined when calling testSimpleToken.');
            }
            const localVarPath = `/test-simple-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication simpleToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Functions-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Functions-Key"] = localVarApiKeyValue;
            }

            if (qo !== undefined) {
                localVarQueryParameter['qo'] = qo;
            }

            if (qr !== undefined) {
                localVarQueryParameter['qr'] = qr;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testWithEmptyResponse: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/test-with-empty-response`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {any} firstParam 
         * @param {any} secondParam 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testWithTwoParams: async (firstParam: any, secondParam: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'firstParam' is not null or undefined
            if (firstParam === null || firstParam === undefined) {
                throw new RequiredError('firstParam','Required parameter firstParam was null or undefined when calling testWithTwoParams.');
            }
            // verify required parameter 'secondParam' is not null or undefined
            if (secondParam === null || secondParam === undefined) {
                throw new RequiredError('secondParam','Required parameter secondParam was null or undefined when calling testWithTwoParams.');
            }
            const localVarPath = `/test-two-path-params/{first-param}/{second-param}`
                .replace(`{${"first-param"}}`, encodeURIComponent(String(firstParam)))
                .replace(`{${"second-param"}}`, encodeURIComponent(String(secondParam)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {NewModel} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putTestParameterWithBodyReference(body?: NewModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putTestParameterWithBodyReference(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {any} qr 
         * @param {any} [qo] 
         * @param {any} [cursor] An opaque identifier that points to the next item in the collection.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testAuthBearer(qr: any, qo?: any, cursor?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).testAuthBearer(qr, qo, cursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {any} qr 
         * @param {any} [qo] 
         * @param {any} [cursor] An opaque identifier that points to the next item in the collection.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testAuthBearerHttp(qr: any, qo?: any, cursor?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).testAuthBearerHttp(qr, qo, cursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testBinaryFileDownload(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).testBinaryFileDownload(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testBinaryFileUploadForm(file: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).testBinaryFileUploadForm(file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testCustomTokenHeader(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).testCustomTokenHeader(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testDates(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Person>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).testDates(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testFileUploadForm(file: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).testFileUploadForm(file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {CustomStringFormatTest} [param] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testHeaderOptional(param?: CustomStringFormatTest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).testHeaderOptional(param, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {CustomStringFormatTest} param 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testHeaderWithSchemaRef(param: CustomStringFormatTest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).testHeaderWithSchemaRef(param, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testMultipleSuccess(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Message>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).testMultipleSuccess(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {CustomStringFormatTest} param 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testParamWithSchemaRef(param: CustomStringFormatTest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).testParamWithSchemaRef(param, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {NewModel} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testParameterWithBodyReference(body?: NewModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).testParameterWithBodyReference(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {any} pathParam 
         * @param {any} headerInlineParam 
         * @param {any} xHeaderParam A header param which has dashes in it
         * @param {any} [fooBar] 
         * @param {any} [requestId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testParameterWithDash(pathParam: any, headerInlineParam: any, xHeaderParam: any, fooBar?: any, requestId?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).testParameterWithDash(pathParam, headerInlineParam, xHeaderParam, fooBar, requestId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {any} pathParam 
         * @param {any} headerInlineParam 
         * @param {any} xHeaderParam A header param which has dashes in it
         * @param {any} [fooBar] 
         * @param {any} [requestId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testParameterWithDashAnUnderscore(pathParam: any, headerInlineParam: any, xHeaderParam: any, fooBar?: any, requestId?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).testParameterWithDashAnUnderscore(pathParam, headerInlineParam, xHeaderParam, fooBar, requestId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {any} [requestId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testParameterWithReference(requestId?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).testParameterWithReference(requestId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * when we declare parameters at path level
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testParametersAtPathLevel(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).testParametersAtPathLevel(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testResponseHeader(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Message>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).testResponseHeader(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * simply test of patch endpoint are considered
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testSimplePatch(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).testSimplePatch(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {any} qr 
         * @param {any} [qo] 
         * @param {any} [cursor] An opaque identifier that points to the next item in the collection.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testSimpleToken(qr: any, qo?: any, cursor?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).testSimpleToken(qr, qo, cursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testWithEmptyResponse(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).testWithEmptyResponse(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {any} firstParam 
         * @param {any} secondParam 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testWithTwoParams(firstParam: any, secondParam: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).testWithTwoParams(firstParam, secondParam, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {NewModel} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putTestParameterWithBodyReference(body?: NewModel, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return DefaultApiFp(configuration).putTestParameterWithBodyReference(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {any} qr 
         * @param {any} [qo] 
         * @param {any} [cursor] An opaque identifier that points to the next item in the collection.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testAuthBearer(qr: any, qo?: any, cursor?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return DefaultApiFp(configuration).testAuthBearer(qr, qo, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {any} qr 
         * @param {any} [qo] 
         * @param {any} [cursor] An opaque identifier that points to the next item in the collection.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testAuthBearerHttp(qr: any, qo?: any, cursor?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return DefaultApiFp(configuration).testAuthBearerHttp(qr, qo, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testBinaryFileDownload(options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return DefaultApiFp(configuration).testBinaryFileDownload(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testBinaryFileUploadForm(file: any, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return DefaultApiFp(configuration).testBinaryFileUploadForm(file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testCustomTokenHeader(options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return DefaultApiFp(configuration).testCustomTokenHeader(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testDates(options?: AxiosRequestConfig): Promise<AxiosResponse<Person>> {
            return DefaultApiFp(configuration).testDates(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testFileUploadForm(file: any, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return DefaultApiFp(configuration).testFileUploadForm(file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomStringFormatTest} [param] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testHeaderOptional(param?: CustomStringFormatTest, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return DefaultApiFp(configuration).testHeaderOptional(param, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomStringFormatTest} param 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testHeaderWithSchemaRef(param: CustomStringFormatTest, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return DefaultApiFp(configuration).testHeaderWithSchemaRef(param, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testMultipleSuccess(options?: AxiosRequestConfig): Promise<AxiosResponse<Message>> {
            return DefaultApiFp(configuration).testMultipleSuccess(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomStringFormatTest} param 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testParamWithSchemaRef(param: CustomStringFormatTest, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return DefaultApiFp(configuration).testParamWithSchemaRef(param, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewModel} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testParameterWithBodyReference(body?: NewModel, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return DefaultApiFp(configuration).testParameterWithBodyReference(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {any} pathParam 
         * @param {any} headerInlineParam 
         * @param {any} xHeaderParam A header param which has dashes in it
         * @param {any} [fooBar] 
         * @param {any} [requestId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testParameterWithDash(pathParam: any, headerInlineParam: any, xHeaderParam: any, fooBar?: any, requestId?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return DefaultApiFp(configuration).testParameterWithDash(pathParam, headerInlineParam, xHeaderParam, fooBar, requestId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {any} pathParam 
         * @param {any} headerInlineParam 
         * @param {any} xHeaderParam A header param which has dashes in it
         * @param {any} [fooBar] 
         * @param {any} [requestId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testParameterWithDashAnUnderscore(pathParam: any, headerInlineParam: any, xHeaderParam: any, fooBar?: any, requestId?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return DefaultApiFp(configuration).testParameterWithDashAnUnderscore(pathParam, headerInlineParam, xHeaderParam, fooBar, requestId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {any} [requestId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testParameterWithReference(requestId?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return DefaultApiFp(configuration).testParameterWithReference(requestId, options).then((request) => request(axios, basePath));
        },
        /**
         * when we declare parameters at path level
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testParametersAtPathLevel(options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return DefaultApiFp(configuration).testParametersAtPathLevel(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testResponseHeader(options?: AxiosRequestConfig): Promise<AxiosResponse<Message>> {
            return DefaultApiFp(configuration).testResponseHeader(options).then((request) => request(axios, basePath));
        },
        /**
         * simply test of patch endpoint are considered
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testSimplePatch(options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return DefaultApiFp(configuration).testSimplePatch(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {any} qr 
         * @param {any} [qo] 
         * @param {any} [cursor] An opaque identifier that points to the next item in the collection.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testSimpleToken(qr: any, qo?: any, cursor?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return DefaultApiFp(configuration).testSimpleToken(qr, qo, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testWithEmptyResponse(options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return DefaultApiFp(configuration).testWithEmptyResponse(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {any} firstParam 
         * @param {any} secondParam 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testWithTwoParams(firstParam: any, secondParam: any, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return DefaultApiFp(configuration).testWithTwoParams(firstParam, secondParam, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {NewModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async putTestParameterWithBodyReference(body?: NewModel, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return DefaultApiFp(this.configuration).putTestParameterWithBodyReference(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {any} qr 
     * @param {any} [qo] 
     * @param {any} [cursor] An opaque identifier that points to the next item in the collection.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async testAuthBearer(qr: any, qo?: any, cursor?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return DefaultApiFp(this.configuration).testAuthBearer(qr, qo, cursor, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {any} qr 
     * @param {any} [qo] 
     * @param {any} [cursor] An opaque identifier that points to the next item in the collection.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async testAuthBearerHttp(qr: any, qo?: any, cursor?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return DefaultApiFp(this.configuration).testAuthBearerHttp(qr, qo, cursor, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async testBinaryFileDownload(options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return DefaultApiFp(this.configuration).testBinaryFileDownload(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {any} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async testBinaryFileUploadForm(file: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return DefaultApiFp(this.configuration).testBinaryFileUploadForm(file, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async testCustomTokenHeader(options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return DefaultApiFp(this.configuration).testCustomTokenHeader(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async testDates(options?: AxiosRequestConfig) : Promise<AxiosResponse<Person>> {
        return DefaultApiFp(this.configuration).testDates(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {any} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async testFileUploadForm(file: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return DefaultApiFp(this.configuration).testFileUploadForm(file, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {CustomStringFormatTest} [param] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async testHeaderOptional(param?: CustomStringFormatTest, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return DefaultApiFp(this.configuration).testHeaderOptional(param, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {CustomStringFormatTest} param 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async testHeaderWithSchemaRef(param: CustomStringFormatTest, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return DefaultApiFp(this.configuration).testHeaderWithSchemaRef(param, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async testMultipleSuccess(options?: AxiosRequestConfig) : Promise<AxiosResponse<Message>> {
        return DefaultApiFp(this.configuration).testMultipleSuccess(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {CustomStringFormatTest} param 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async testParamWithSchemaRef(param: CustomStringFormatTest, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return DefaultApiFp(this.configuration).testParamWithSchemaRef(param, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {NewModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async testParameterWithBodyReference(body?: NewModel, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return DefaultApiFp(this.configuration).testParameterWithBodyReference(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {any} pathParam 
     * @param {any} headerInlineParam 
     * @param {any} xHeaderParam A header param which has dashes in it
     * @param {any} [fooBar] 
     * @param {any} [requestId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async testParameterWithDash(pathParam: any, headerInlineParam: any, xHeaderParam: any, fooBar?: any, requestId?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return DefaultApiFp(this.configuration).testParameterWithDash(pathParam, headerInlineParam, xHeaderParam, fooBar, requestId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {any} pathParam 
     * @param {any} headerInlineParam 
     * @param {any} xHeaderParam A header param which has dashes in it
     * @param {any} [fooBar] 
     * @param {any} [requestId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async testParameterWithDashAnUnderscore(pathParam: any, headerInlineParam: any, xHeaderParam: any, fooBar?: any, requestId?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return DefaultApiFp(this.configuration).testParameterWithDashAnUnderscore(pathParam, headerInlineParam, xHeaderParam, fooBar, requestId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {any} [requestId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async testParameterWithReference(requestId?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return DefaultApiFp(this.configuration).testParameterWithReference(requestId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * when we declare parameters at path level
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async testParametersAtPathLevel(options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return DefaultApiFp(this.configuration).testParametersAtPathLevel(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async testResponseHeader(options?: AxiosRequestConfig) : Promise<AxiosResponse<Message>> {
        return DefaultApiFp(this.configuration).testResponseHeader(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * simply test of patch endpoint are considered
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async testSimplePatch(options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return DefaultApiFp(this.configuration).testSimplePatch(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {any} qr 
     * @param {any} [qo] 
     * @param {any} [cursor] An opaque identifier that points to the next item in the collection.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async testSimpleToken(qr: any, qo?: any, cursor?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return DefaultApiFp(this.configuration).testSimpleToken(qr, qo, cursor, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async testWithEmptyResponse(options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return DefaultApiFp(this.configuration).testWithEmptyResponse(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {any} firstParam 
     * @param {any} secondParam 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async testWithTwoParams(firstParam: any, secondParam: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return DefaultApiFp(this.configuration).testWithTwoParams(firstParam, secondParam, options).then((request) => request(this.axios, this.basePath));
    }
}
