// Generated by ts-to-zod
import { z } from "zod";
import { ConstantIntegerTest } from "./data-contracts";

export const zipCodeSchema = z.string().regex(/^\d{5}$/);

export const fiscalCodeSchema = z
  .string()
  .regex(
    /^[A-Z]{6}[0-9LMNPQRSTUV]{2}[ABCDEHLMPRST][0-9LMNPQRSTUV]{2}[A-Z][0-9LMNPQRSTUV]{3}[A-Z]$/,
  );

export const emailAddressSchema = z.string().email();

export const isInboxEnabledSchema = z.boolean().default(false);

export const isWebhookEnabledSchema = z.boolean().default(false);

export const simpleDefinitionSchema = z.object({
  id: z.string(),
});

export const definitionFieldWithDashSchema = z.object({
  "id-field": z.string().optional(),
});

export const messageSubjectSchema = z.string().min(10).max(120);

export const messageBodyMarkdownSchema = z.string().min(80).max(10000);

export const messageContentSchema = z.object({
  subject: messageSubjectSchema.optional(),
  markdown: messageBodyMarkdownSchema,
});

export const messageSchema = z.object({
  id: z.string(),
  content: messageContentSchema,
  sender_service_id: z.string().optional(),
});

export const newModelSchema = z.object({
  id: z.string(),
  name: z.string(),
});

export const paginationResponseSchema = z.object({
  page_size: z.number().min(1).optional(),
  next: z.string().optional(),
});

export const oneOfTestSchema = z.union([
  z.object({
    limited: z.boolean().optional(),
  }),
  z.object({
    unlimited: z.boolean().optional(),
  }),
]);

export const allOfWithOneElementTestSchema = z.object({
  key: z.string().optional(),
});

export const allOfTestSchema = z
  .object({
    items: z.array(messageSchema).optional(),
  })
  .and(paginationResponseSchema);

export const preferredLanguageSchema = z.string();

export const anObjectWithAnItemsFieldSchema = z.object({
  items: z.array(definitionFieldWithDashSchema),
});

export const anObjectWithRefImportSchema = z.object({
  prop1: simpleDefinitionSchema,
});

export const withinRangeStringTestSchema = z.string().min(8).max(10);

export const nonNegativeNumberTestSchema = z.number();

export const constantIntegerTestSchema = z.nativeEnum(ConstantIntegerTest);

export const nonNegativeIntegerTestSchema = z.number();

export const withinRangeIntegerTestSchema = z.number();

export const withinRangeNumberTestSchema = z.number();

export const withinRangeExclusiveMaximumIntegerTestSchema = z.number();

export const withinRangeExclusiveMinimumIntegerTestSchema = z.number();

export const withinRangeExclusiveMinimumNumberTestSchema = z.number();

export const withinRangeExclusiveMinMaxIntegerTestSchema = z.number();

export const withinRangeExclusiveMinMaxNumberTestSchema = z.number();

export const withinRangeExclusiveMaximumNumberTestSchema = z.number();

export const customStringFormatTestSchema = z.string();

export const enumTestSchema = z.object({
  status: z
    .union([z.literal("value1"), z.literal("value2"), z.literal("value3")])
    .optional(),
});

export const additionalPropsTestSchema = z.record(z.array(z.number()));

export const additionalPropsTrueTestSchema = z.record(z.any());

export const additionalpropsDefaultSchema = z
  .record(z.array(z.number()).default('{"test":[1000]}'))
  .default('{"test":[1000]}');

export const inlinePropertyTestSchema = z.object({
  inlineProp: z
    .string()
    .regex(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/)
    .optional(),
});

export const nestedObjectTestSchema = z.object({
  inlineProp: z
    .string()
    .regex(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/)
    .optional(),
  nestedObject: z
    .object({
      inlineProp: z
        .string()
        .regex(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/)
        .optional(),
    })
    .optional(),
});

export const organizationFiscalCodeSchema = z.string();

export const organizationFiscalCodeTestSchema = z.string();

export const listOfDefinitionsSchema = z.array(
  z.object({
    field: z.string().optional(),
  }),
);

export const listOfReferencesSchema = z.array(definitionFieldWithDashSchema);

export const enabledUserTestSchema = z.object({
  description: z.string(),
  enabled: z.literal(true),
  username: z.string(),
});

export const disabledUserTestSchema = z.object({
  enabled: z.literal(false),
  reason: z.string(),
  username: z.string(),
});

export const disjointUnionsUserTestSchema = z.union([
  enabledUserTestSchema,
  disabledUserTestSchema,
]);

export const enumTrueTestSchema = z.object({
  flag: z.literal(true).optional(),
});

export const enumFalseTestSchema = z.object({
  flag: z.literal(false).optional(),
});

export const objectDefinitionWithImplicitTypeSchema = z.object({
  prop_one: z.string().optional(),
  prop_two: z.string().optional(),
});

export const objectDefinitionWithImplicitTypeAndAdditionalPropertiesSchema =
  z.any();

export const addressSchema = z.object({
  location: z.string().optional(),
  city: z.string().optional(),
  zipCode: zipCodeSchema.optional(),
});

export const preferredLanguagesSchema = z.array(preferredLanguageSchema);

export const personSchema = z.object({
  name: z.string().optional(),
  address: addressSchema.optional(),
  birth: z.string().datetime().optional(),
  death: z.string().optional(),
  age: z.union([z.literal(20), z.literal(40), z.literal(50)]).optional(),
  zipCode: z
    .string()
    .regex(/[0-9]+/)
    .optional(),
});

export const authorSchema = z.object({
  isDead: z.boolean().optional(),
  info: personSchema.optional(),
});

export const bookSchema = z.object({
  title: z.string().optional(),
  author: authorSchema.optional(),
});

export const profileSchema = z.object({
  email: emailAddressSchema.optional(),
  family_name: z.string(),
  fiscal_code: fiscalCodeSchema,
  has_profile: z.boolean(),
  is_email_set: z.boolean(),
  is_inbox_enabled: isInboxEnabledSchema.optional(),
  is_webhook_enabled: isWebhookEnabledSchema.optional(),
  name: z.string(),
  preferred_email: emailAddressSchema.optional(),
  preferred_languages: preferredLanguagesSchema.optional(),
  version: z.number(),
  payload: z.any().optional(),
});

export const allOfWithOneRefElementTestSchema = profileSchema;

export const allOfWithXExtensibleEnumSchema = profileSchema.and(
  z.object({
    status: z.string(),
  }),
);
