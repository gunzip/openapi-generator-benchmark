// Generated by ts-to-zod
import { z } from "zod";

export const constantIntegerTestSchema = z.literal(100);

export const personSchema = z.any();

export const bookSchema = z.any();

export const fiscalCodeSchema = z
  .string()
  .regex(
    /^[A-Z]{6}[0-9LMNPQRSTUV]{2}[ABCDEHLMPRST][0-9LMNPQRSTUV]{2}[A-Z][0-9LMNPQRSTUV]{3}[A-Z]$/,
  );

export const emailAddressSchema = z.string().email();

export const isInboxEnabledSchema = z.boolean().default(false);

export const isWebhookEnabledSchema = z.boolean().default(false);

export const simpleDefinitionSchema = z.object({
  id: z.string(),
});

export const definitionFieldWithDashSchema = z.object({
  "id-field": z.string().optional(),
});

export const messageSubjectSchema = z.string().min(10).max(120);

export const messageBodyMarkdownSchema = z.string().min(80).max(10000);

export const messageContentSchema = z.object({
  subject: messageSubjectSchema.optional(),
  markdown: messageBodyMarkdownSchema,
});

export const messageSchema = z.object({
  id: z.string(),
  content: messageContentSchema,
  sender_service_id: z.string().optional(),
});

export const newModelSchema = z.object({
  id: z.string(),
  name: z.string(),
});

export const paginationResponseSchema = z.object({
  page_size: z.number().optional(),
  next: z.string().optional(),
});

export const oneOfTestSchema = z.union([
  z.object({
    limited: z.boolean().optional(),
  }),
  z.object({
    unlimited: z.boolean().optional(),
  }),
]);

export const allOfWithOneElementTestSchema = z.object({
  key: z.string().optional(),
});

export const allOfTestSchema = z
  .object({
    items: z.array(messageSchema).optional(),
  })
  .and(paginationResponseSchema);

export const preferredLanguageSchema = z.string();

export const preferredLanguagesSchema = z.array(preferredLanguageSchema);

export const anObjectWithAnItemsFieldSchema = z.object({
  items: z.array(definitionFieldWithDashSchema),
});

export const anObjectWithRefImportSchema = z.object({
  prop1: simpleDefinitionSchema,
});

export const testDeserUserSchema = z.object({
  name: z.string(),
  age: z.number(),
});

export const withinRangeStringTestSchema = z.string().min(8).max(10);

export const nonNegativeNumberTestSchema = z.number();

export const nonNegativeIntegerTestSchema = z.number();

export const withinRangeIntegerTestSchema = z.number();

export const withinRangeNumberTestSchema = z.number();

export const withinRangeExclusiveMaximumIntegerTestSchema = z.number();

export const withinRangeExclusiveMinimumIntegerTestSchema = z.number();

export const withinRangeExclusiveMinimumNumberTestSchema = z.number();

export const withinRangeExclusiveMinMaxIntegerTestSchema = z.number();

export const withinRangeExclusiveMinMaxNumberTestSchema = z.number();

export const withinRangeExclusiveMaximumNumberTestSchema = z.number();

export const customStringFormatTestSchema = z.string();

export const enumTestStatusEnumSchema = z.union([
  z.literal("value1"),
  z.literal("value2"),
  z.literal("value3"),
]);

export const additionalPropsTestSchema = z.record(z.array(z.number()));

export const additionalPropsTrueTestSchema = z.record(z.any());

export const additionalpropsDefaultSchema = z
  .record(z.array(z.number()).default({ test: [1000] }))
  .default({ test: [1000] });

export const inlinePropertyTestSchema = z.object({
  inlineProp: z
    .string()
    .regex(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/)
    .optional(),
});

export const nestedObjectTestSchema = z.object({
  inlineProp: z
    .string()
    .regex(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/)
    .optional(),
  nestedObject: z
    .object({
      inlineProp: z
        .string()
        .regex(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/)
        .optional(),
    })
    .optional(),
});

export const organizationFiscalCodeSchema = z.string();

export const organizationFiscalCodeTestSchema = z.string();

export const listOfDefinitionsSchema = z.array(
  z.object({
    field: z.string().optional(),
  }),
);

export const listOfReferencesSchema = z.array(definitionFieldWithDashSchema);

export const enabledUserTestEnabledEnumSchema = z.literal(true);

export const disabledUserTestEnabledEnumSchema = z.literal(false);

export const enabledUserTestSchema = z.object({
  description: z.string(),
  enabled: enabledUserTestEnabledEnumSchema,
  username: z.string(),
});

export const disabledUserTestSchema = z.object({
  enabled: disabledUserTestEnabledEnumSchema,
  reason: z.string(),
  username: z.string(),
});

export const enumTrueTestFlagEnumSchema = z.literal(true);

export const enumFalseTestFlagEnumSchema = z.literal(false);

export const objectDefinitionWithImplicitTypeSchema = z.object({
  prop_one: z.string().optional(),
  prop_two: z.string().optional(),
});

export const objectDefinitionWithImplicitTypeAndAdditionalPropertiesSchema =
  z.any();

export const problemDetailsSchema = z.object({
  type: z.string().optional(),
  title: z.string().optional(),
  status: z.number().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
});

export const notFoundSchema = z.any();

export const testAuthBearerParamsSchema = z.object({
  qo: z.string().optional(),
  qr: z.string(),
  cursor: z.string().min(1).optional(),
});

export const testAuthBearerDataSchema = personSchema;

export const testAuthBearerHttpParamsSchema = z.object({
  qo: z.string().optional(),
  qr: z.string(),
  cursor: z.string().min(1).optional(),
});

export const testAuthBearerHttpDataSchema = z.any();

export const testAuthBearerHttpErrorSchema = z.union([
  z.object({
    prop1: simpleDefinitionSchema,
    prop2: z.string().optional(),
  }),
  problemDetailsSchema,
]);

export const testSimpleTokenParamsSchema = z.object({
  qo: z.string().optional(),
  qr: z.string(),
  cursor: z.string().optional(),
});

export const testSimpleTokenDataSchema = z.any();

export const testMultipleSuccessDataSchema = messageSchema;

export const testMultipleSuccessErrorSchema = oneOfTestSchema;

export const testFileUploadDataSchema = z.any();

export const testBinaryFileUploadDataSchema = z.any();

export const testResponseHeaderDataSchema = messageSchema;

export const testParameterWithReferenceParamsSchema = z.object({
  "request-id": z.string().min(10).optional(),
});

export const testParameterWithReferenceDataSchema = z.any();

export const testInlineBodySchemaPayloadSchema = z.object({
  name: z.string(),
  age: z.number().optional(),
});

export const testInlineBodySchemaDataSchema = z.any();

export const testParameterWithBodyReferenceDataSchema = z.any();

export const putTestParameterWithBodyReferenceDataSchema = z.any();

export const testParameterWithDashParamsSchema = z.object({
  "foo-bar": z.string().optional(),
  "request-id": z.string().min(10).optional(),
  pathParam: z.string().min(5),
});

export const testParameterWithDashDataSchema = z.any();

export const testParameterWithDashAnUnderscoreParamsSchema = z.object({
  foo_bar: z.string().optional(),
  "request-id": z.string().min(10).optional(),
  pathParam: z.string(),
});

export const testParameterWithDashAnUnderscoreDataSchema = z.any();

export const testWithTwoParamsDataSchema = z.any();

export const testParametersAtPathLevelParamsSchema = z.object({
  "request-id": z.string(),
  cursor: z.string().optional(),
});

export const testParametersAtPathLevelDataSchema = z.any();

export const testSimplePatchDataSchema = z.any();

export const testCustomTokenHeaderDataSchema = z.any();

export const testParamWithSchemaRefDataSchema = z.any();

export const testHeaderWithSchemaRefDataSchema = z.any();

export const testHeaderOptionalDataSchema = z.any();

export const testOverriddenSecurityDataSchema = z.any();

export const testOverriddenSecurityNoAuthDataSchema = z.any();

export const testMultiContentTypesDataSchema = newModelSchema;

export const testDeserializationDataSchema = testDeserUserSchema;

export const profileSchema = z.object({
  email: emailAddressSchema.optional(),
  family_name: z.string(),
  fiscal_code: fiscalCodeSchema,
  has_profile: z.boolean(),
  is_email_set: z.boolean(),
  is_inbox_enabled: isInboxEnabledSchema.optional(),
  is_webhook_enabled: isWebhookEnabledSchema.optional(),
  name: z.string(),
  preferred_email: emailAddressSchema.optional(),
  preferred_languages: preferredLanguagesSchema.optional(),
  version: z.number(),
  payload: z.record(z.any()).optional(),
});

export const allOfWithOneRefElementTestSchema = profileSchema;

export const allOfWithXExtensibleEnumSchema = profileSchema.and(
  z.object({
    status: z.string(),
  }),
);

export const enumTestSchema = z.object({
  status: enumTestStatusEnumSchema.optional(),
});

export const disjointUnionsUserTestSchema = z.union([
  enabledUserTestSchema,
  disabledUserTestSchema,
]);

export const enumTrueTestSchema = z.object({
  flag: enumTrueTestFlagEnumSchema.optional(),
});

export const enumFalseTestSchema = z.object({
  flag: enumFalseTestFlagEnumSchema.optional(),
});
